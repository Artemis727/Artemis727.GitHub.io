<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Syaoran :)</title>
  
  
  <link href="https://artemis727.github.io/atom.xml" rel="self"/>
  
  <link href="https://artemis727.github.io/"/>
  <updated>2024-04-07T12:14:26.763Z</updated>
  <id>https://artemis727.github.io/</id>
  
  <author>
    <name>Syaoran Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://artemis727.github.io/2024/04/05/Data%20Science%20Interview%20Handbook/"/>
    <id>https://artemis727.github.io/2024/04/05/Data%20Science%20Interview%20Handbook/</id>
    <published>2024-04-05T14:49:03.357Z</published>
    <updated>2024-04-07T12:14:26.763Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://p.ipic.vip/f21989.png" alt="img"></p><h1 id="k-means"><a class="markdownIt-Anchor" href="#k-means"></a> <a class="link" href="https://zhuanlan.zhihu.com/p/141882592">K-means<i class="fas fa-external-link-alt"></i></a></h1><ul><li><u>Clustering</u> -&gt; unsupervised.</li><li><u>Business example</u> -&gt; If we have a large amount of information on <strong>current and potential customers</strong>, we can use clustering to <strong>divide customers into groups for further analysis and marketing campaigns</strong>. -&gt; RFM + clustering</li><li><u>降维和矢量化 Vector Quantization</u> -&gt; 可以将高维特征压缩到一列当中，常常用于图像，声音，视频等非结构化数据，可以大幅度压缩数据量。High-dimensional features can be compressed into a column, often used in images, sound, video and other unstructured data, which can greatly compress the data.</li></ul><h2 id="聚类算法和分类算法的区别"><a class="markdownIt-Anchor" href="#聚类算法和分类算法的区别"></a> 聚类算法和分类算法的区别：</h2><p><img src="https://p.ipic.vip/bbnei6.jpg" alt="img"></p><h2 id="常用聚类算法的简单介绍"><a class="markdownIt-Anchor" href="#常用聚类算法的简单介绍"></a> 常用聚类算法的简单介绍：</h2><ul><li><strong>K-means聚类:<strong>也称为K均值聚类，它试图发现k(用户指定个数)个不同的簇 ，并且</strong>每个簇的中心采用簇中所含值的均值计算而成</strong>。</li><li>**层次聚类:**层次聚类(hierarchical clustering)试图在不同层次对数据集进行划分，从而形成树形的聚类结构。</li><li><strong>DBSCAN:<strong>这是一种基于</strong>密度</strong> density 的聚类算法，<strong>簇的个数由算法自动地确定</strong>。低密度区域中的点被视为噪声而忽略，因此DBSCAN不产生完全聚类。</li></ul><h2 id="k-means-process"><a class="markdownIt-Anchor" href="#k-means-process"></a> K-means Process</h2><p><img src="https://p.ipic.vip/cjajjd.jpg" alt="img"></p><p><img src="https://p.ipic.vip/7fu6mz.jpg" alt="img"></p><h2 id="聚类算法聚出的类有什么含义呢这些类有什么样的性质"><a class="markdownIt-Anchor" href="#聚类算法聚出的类有什么含义呢这些类有什么样的性质"></a> <strong>聚类算法聚出的类有什么含义呢?这些类有什么样的性质?</strong></h2><ul><li>我们认为，被分在同一个簇中的数据是有相似性的，而不同簇中的数据是不同的，<strong>当聚类完毕之后，我们就要分别去研究每个簇中的样本都有什么样的性质，从而根据业务需求制定不同的商业或者科技策略。</strong></li><li>聚类算法我们追求的是“<strong>簇内差异小，簇外差异大</strong>”。而这个“差异”，由样本点到其所在簇的质心的距离来衡量。**KMeans追求的是，求解能够让Inertia最小化的质心。**实际上，我们也可以使用其他距离，每个距离都有自己对应的Inertia。</li></ul><p><img src="https://pic3.zhimg.com/80/v2-7352114269686af769a4471845fe9296_1440w.webp" alt="img"></p><h2 id="执行过程"><a class="markdownIt-Anchor" href="#执行过程"></a> 执行过程</h2><p>（1）数据预处理，如归一化、离散点处理即可。</p><p>（2）随机选取K个簇中心（K是用户指定的参数，即所期望的簇的个数）</p><p>（3）定义代价函数（可以将簇内平方和函数作为代价函数）</p><p>（4）定义迭代次数t，重复下面过程直到代价函数收敛（或簇心不发生变化、或达到迭代次数）</p><p>- 对于每一个样本x，将其分配到距离最近的簇；</p><p>- 对于每一个簇，重新计算该类簇的中心。</p><h2 id="k-means聚类的初始值k怎么选取"><a class="markdownIt-Anchor" href="#k-means聚类的初始值k怎么选取"></a> k-means聚类的初始值k怎么选取？</h2><ul><li><p>简单方法</p><ul><li><p>**一是选取k值可以根据具体的业务需求制定。**比如说，一个游戏公司想把所有玩家做聚类分析，分成顶级、高级、中级、菜鸟四类，那么K=4；如果房地产公司想把当地的商品房分成高中低三档，那么K=3。按需选择虽然合理，但是未必能保证在做K-Means时能够得到清晰的分界线。</p><p><strong>二是可以“观察”</strong>。如果数据量较少，或者可以先对原始数据集采样，随后对这些数据进行可视化，观察其大概分为多少类，进而设置k的取值。</p></li></ul></li><li><p>专业方法</p><ul><li>Elbow Method：优点是适用于高维的样本数据。有时候人们也会把手肘法用于不同的度量上，如组内方差组间方差比。<img src="https://p.ipic.vip/3rwwiz.png" alt="image-20240405231046647"><img src="https://p.ipic.vip/bj6bt6.jpg" alt="img"></li><li><strong>Gap Static</strong></li><li><strong>Silhouette Score</strong></li></ul></li></ul><h1 id="dbscan-density-based-spatial-clustering-of-applications-with-noise"><a class="markdownIt-Anchor" href="#dbscan-density-based-spatial-clustering-of-applications-with-noise"></a> <a class="link" href="https://cloud.tencent.com/developer/article/1971939">DBSCAN (Density-Based Spatial Clustering of Applications with Noise)<i class="fas fa-external-link-alt"></i></a></h1><ul><li>DBSCAN(Density-Based Spatial Clustering of Applications with Noise, 具有噪声的基于密度的聚类方法) 是一基于密度的聚类算法，DBSCAN将簇定义为<strong>密度相连的点的最大集合</strong>，能够把具有足够高密度的区域划分为簇，并可在噪声的空间数据库中发现任意形状的聚类。</li></ul><p><img src="https://p.ipic.vip/upre42.png" alt="img"></p><ul><li><p>上面这些点是分布在样本空间的众多样本，现在我们的目标是把这些在样本空间中距离相近的聚成一类。</p><p>我们发现A点附近的点密度较大，红色的圆圈根据一定的规则在这里滚啊滚，最终收纳了A附近的5个点，标记为红色也就是定为同一个簇。</p><p>其它没有被收纳的根据一样的规则成簇。</p><p>形象来说，我们可以认为这是系统在众多样本点中随机选中一个，围绕这个被选中的样本点画一个圆，规定这个圆的半径以及圆内最少包含的样本点，如果在指定半径内有足够多的样本点在内，那么这个圆圈的圆心就转移到这个内部样本点，继续去圈附近其它的样本点，类似传销一样，继续去发展下线。</p><p>等到这个滚来滚去的圈发现所圈住的样本点数量少于预先指定的值，就停止了。那么我们称最开始那个点为核心点，如A，停下来的那个点为边界点，如B、C，没得滚的那个点为离群点，如N）。</p></li><li><p>基于密度这点有什么好处呢？</p><p>我们知道kmeans聚类算法只能处理球形的簇，也就是一个聚成实心的团（这是因为算法本身计算平均距离的局限）。但往往现实中还会有各种形状，比如下面两张图，环形和不规则形，这个时候，那些传统的聚类算法显然就悲剧了。</p><p>于是就思考，样本密度大的成一类呗，这就是DBSCAN聚类算法。</p></li></ul><p><img src="https://p.ipic.vip/skt3zb.png" alt="img"></p><ul><li><p>怎么选择半径？<img src="https://p.ipic.vip/j2f9is.png" alt="img"></p></li><li><p>怎么选择**MinPts：**这个参数就是圈住的点的个数，也相当于是一个密度，一般这个值都是偏小一些，然后进行多次尝试</p></li><li><p>DBSCAN 算法的计算复杂的度为 O(n²)</p></li></ul><h1 id="optics-ordering-points-to-identify-the-clustering-structure"><a class="markdownIt-Anchor" href="#optics-ordering-points-to-identify-the-clustering-structure"></a> <a class="link" href="https://blog.csdn.net/haveanybody/article/details/113782209">OPTICS (Ordering points to identify the clustering structure)<i class="fas fa-external-link-alt"></i></a></h1><ul><li><p>OPTICS算法是DBSCAN的改进版本，<strong>因此OPTICS算法也是一种基于密度的聚类算法</strong>。</p></li><li><p>在DBSCAN算法中，有两个比较重要的参数：邻域半径eps和核心对象的最小邻域样本数min_samples，选择不同的参数会导致最终聚类的结果千差万别，<strong>而在高维数据中，两个参数的联合调参也不是一件容易的事</strong>。<strong>OPTICS算法的提出就是为了帮助DBSCAN算法选择合适的参数，降低输入参数的敏感度</strong>。</p></li><li><p>实际上，OPTICS并不显式的生成数据聚类结果，只是<strong>对数据集中的对象进行排序，得到一个有序的对象列表</strong>，通过该有序列表，可以得到一个<strong>决策图</strong>，通过决策图可以<strong>选择不同的eps参数进行DBSCAN聚类</strong>。</p></li></ul><p>两个基本概念：</p><ul><li>core distance 核心距离：核心距离是使一个样本点成为core points的最小半径，在给定邻域半径eps和minPoints参数的前提下，核心距离可以比给定的eps更小</li><li>reachability distance：可达距离指的是样本与core point的距离</li></ul><p>缺点：It only produces a cluster ordering.</p><p><img src="https://p.ipic.vip/q83a23.png" alt="7777"></p><p>OPTICS并不依赖全局变量来确定聚类，而是将空间上最接近的点相邻排列，以得到数据集合中的对象的线性排序。排序后生成的序列存储了与相邻点之间的距离，并最终生成了一个 dendrogram 。OPTICS算法的思路与<a class="link" href="https://zh.wikipedia.org/wiki/DBSCAN">DBSCAN<i class="fas fa-external-link-alt"></i></a>类似，但是解决了DBSCAN的一个主要弱点，即如何在密度变化的数据中取得有效的聚类。同时 OPTICS也避免了多数聚类算法中对输入参数敏感的问题。</p><h1 id="linear-regression"><a class="markdownIt-Anchor" href="#linear-regression"></a> <a class="link" href="https://sscc.wisc.edu/sscc/pubs/RegDiag-R/model-assumptions.html">Linear Regression<i class="fas fa-external-link-alt"></i></a></h1><p><img src="https://p.ipic.vip/2lbw97.png" alt="image-20240405235418282"></p><h2 id="model-assumpitions"><a class="markdownIt-Anchor" href="#model-assumpitions"></a> Model Assumpitions</h2><h2 id="tests-that-need-to-be-done-before-modeling"><a class="markdownIt-Anchor" href="#tests-that-need-to-be-done-before-modeling"></a> Tests that need to be done before modeling:</h2><ul><li><p>Testing the <strong>residuals’ normality</strong> =&gt; Why? =&gt; How? Shapiro-Wilk, QQ-plot in R</p></li><li><p>Testing <strong>Residuals Independence</strong> =&gt; Why? =&gt; How? Durbin-Watson test (autocorrelation)</p></li><li><p>Testing Multicollinearity =&gt; VIF (variation inflation factor)</p></li><li><p>Equality of variance (homoscedasticity) =&gt; Levene’s Test</p></li><li><p>Testing linearity =&gt;</p></li><li></li></ul><h1 id="fp-growth"><a class="markdownIt-Anchor" href="#fp-growth"></a> FP-Growth</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://p.ipic.vip/f21989.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;k-means&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#k-means&quot;&gt;&lt;/a&gt; &lt;a class=&quot;link</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://artemis727.github.io/2024/04/03/%E6%89%BE%E5%B7%A5%EF%BD%9C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1/"/>
    <id>https://artemis727.github.io/2024/04/03/%E6%89%BE%E5%B7%A5%EF%BD%9C%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E5%85%AB%E8%82%A1/</id>
    <published>2024-04-03T09:04:28.299Z</published>
    <updated>2024-04-03T12:50:34.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a class="markdownIt-Anchor" href="#计算机网络"></a> 计算机网络</h1><h2 id="输入网址到网页显示发生了什么"><a class="markdownIt-Anchor" href="#输入网址到网页显示发生了什么"></a> <a class="link" href="https://www.xiaolincoding.com/network/1_base/what_happen_url.html#%E5%AD%A4%E5%8D%95%E5%B0%8F%E5%BC%9F-http">输入网址到网页显示发生了什么？<i class="fas fa-external-link-alt"></i></a></h2><ol><li>解析URL：请求服务器里的文件资源，没有路径名的时候就请求默认文件（index.html）</li><li>生成http请求消息</li><li>查询服务器域名对应的IP地址</li><li>操作系统讲httlp请求消息发送给服务器</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算机网络&quot;&gt;&lt;/a&gt; 计算机网络&lt;/h1&gt;
&lt;h2 id=&quot;输入网址到网页显示发生了什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#输入网址到网</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://artemis727.github.io/2024/03/26/%E7%A7%8B%E6%8B%9B%EF%BD%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://artemis727.github.io/2024/03/26/%E7%A7%8B%E6%8B%9B%EF%BD%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-03-26T11:39:21.153Z</published>
    <updated>2024-03-26T11:45:12.913Z</updated>
    
    <content type="html"><![CDATA[<ul><li>进程，线程和协程：<a class="link" href="https://cloud.tencent.com/developer/article/1839604">https://cloud.tencent.com/developer/article/1839604<i class="fas fa-external-link-alt"></i></a><ul><li>协程，又称微线程，是一种用户态的轻量级线程，协程的调度完全由用户控制（也就是在用户态执行）。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到线程的堆区，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</li><li>协程最大的优势就是协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和线程切换相比，线程数量越多，协程的性能优势就越明显。不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。此外，一个线程的内存在MB级别，而协程只需要KB级别。</li></ul></li></ul><p><img src="https://ask.qcloudimg.com/http-save/yehe-5086501/3e01d261018b1434ed70584997d0f12d.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;进程，线程和协程：&lt;a class=&quot;link&quot; href=&quot;https://cloud.tencent.com/developer/article/1839604&quot;&gt;https://cloud.tencent.com/developer/article/183</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://artemis727.github.io/2024/03/25/%E6%89%BE%E5%B7%A5%EF%BD%9C%E6%B8%B8%E6%88%8F%E6%B5%8B%E8%AF%95%E9%9D%A2%E8%AF%95/"/>
    <id>https://artemis727.github.io/2024/03/25/%E6%89%BE%E5%B7%A5%EF%BD%9C%E6%B8%B8%E6%88%8F%E6%B5%8B%E8%AF%95%E9%9D%A2%E8%AF%95/</id>
    <published>2024-03-25T02:04:24.204Z</published>
    <updated>2024-04-07T12:55:03.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术问题"><a class="markdownIt-Anchor" href="#技术问题"></a> 技术问题</h1><ul><li><p>游戏测试的基本流程（6）：</p><ul><li>分析测试<strong>需求</strong></li><li>制定测试<strong>计划</strong></li><li>设计测试<strong>用例</strong></li><li>可能会进行<strong>冒烟测试</strong><ul><li>冒烟测试是软件开发过程中的一种测试方法，旨在检查软件的基本功能是否正常工作。它通常是在软件开发的早期阶段执行的，以便尽早发现可能存在的问题。冒烟测试不是深入的功能测试，而是一种快速的、基本的测试，用于确定软件是否达到了可以进行更详细测试的标准。</li><li>在游戏测试中，冒烟测试也类似地用于验证游戏的基本功能是否正常运作。游戏冒烟测试可能会涉及以下方面：<ul><li>启动和加载： 确保游戏可以正确启动并加载至主菜单。</li><li>基本游戏功能： 确保玩家可以进行基本操作，如移动、跳跃、攻击等，以及游戏中的基本交互。</li><li>关键功能测试： 确保游戏的关键功能，如保存/加载游戏进度、设置选项、音频和视频播放等功能正常。</li><li>游戏流程测试： 确保游戏的主要流程可以顺利进行，如开始游戏、过关、失败、重新开始等流程。</li><li>性能测试： 虽然不是冒烟测试的主要焦点，但通常也会进行一些基本的性能测试，以确保游戏在基本硬件配置下能够正常运行。</li></ul></li><li>总的来说，游戏冒烟测试旨在验证游戏的基本可玩性和功能，以确保在进一步的测试阶段之前，游戏的基本部分是稳定的和可用的。</li></ul></li><li><strong>执行</strong>测试</li><li>生成测试<strong>报告</strong></li></ul></li><li><p>OSI七层：<img src="https://p.ipic.vip/ntszp8.png" alt="image-20240325100619241"></p></li><li><p>TCP和UDP的区别</p></li></ul><p><img src="https://img-blog.csdnimg.cn/470b791a707e45538bdd810320b486f3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAd293b3dv77-9,size_20,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><h1 id="游戏测试和软件测试的关系"><a class="markdownIt-Anchor" href="#游戏测试和软件测试的关系"></a> <a class="link" href="https://blog.csdn.net/qq_52673687/article/details/123791588">游戏测试和软件测试的关系<i class="fas fa-external-link-alt"></i></a></h1><h2 id="1-游戏测试是软件测试的一部分"><a class="markdownIt-Anchor" href="#1-游戏测试是软件测试的一部分"></a> 1. 游戏测试是软件测试的一部分</h2><ul><li><p>游戏测试：<strong>发现游戏里的问题（BUG）并进行改进，从而提升游戏产品的质量。</strong></p></li><li><p>游戏测试具备了软件测试所有一切共同的特性：</p><ul><li><p>①测试的目的是发现软件中存在的<strong>缺陷</strong>。</p></li><li><p>②测试都是需要测试人员<strong>按照产品行为描述来实施</strong>。产品行为描述可以是书面的<u>规格说明书，需求文档，产品文件，或是用户手册，源代码，或是工作的可执行程序</u>。</p></li><li><p>③每一种测试都需要产品运行于<strong>真实的或是模拟环境之下</strong>。</p></li><li><p>④每一种测试都要求以<strong>系统方法展示产品功能</strong>，以证明测试结果是否有效，以及发现其中出错的原因，从而让程序人员进行改进。</p></li></ul></li></ul><h2 id="2-游戏测试中体验感相对重要"><a class="markdownIt-Anchor" href="#2-游戏测试中体验感相对重要"></a> 2. 游戏测试中，体验感相对重要</h2><p>游戏测试和软件测试的不同归纳：</p><ul><li><strong>UI&amp;UE</strong>：<ul><li>大部分软件UI&amp;&amp;UE的重要性没有游戏那么高，在玩游戏的过程中，<strong>愉悦感和趣味性是至关重要的</strong>，如果缺失了这些要素，用户可能瞬间就流失了，也就意味着这款游戏失败了。</li></ul></li><li><strong>数值</strong>：<ul><li>数值对游戏至关重要，无论单机还是网络游戏，<strong>玩家非常重视自己角色的数值增长</strong>。<strong>游戏功能之间的耦合度非常高，数值之间有着千丝万缕的关联，而软件功能之间的耦合度则没有这么高，很多情况下功能之间的数值是相对独立的</strong>。</li></ul></li><li><strong>活动</strong>：<ul><li>游戏中，活动则是频度更高的一种玩法，测试过程中受到的关注度更高，<strong>游戏活动的测试更关注时间与资源产出</strong>，活动衔接也很重要，<strong>任何差错都可能导致更大的损失</strong>，而软件上的活动则没这么严格的概念。</li></ul></li><li><strong>进度</strong>：<ul><li>游戏属娱乐，<strong>其产业链涉及很多前期的市场推广</strong>，各种广告和推广都是真金白银砸下去的，任<strong>何延期都可能导致前期的推广功亏一篑，商业信誉也会受影响</strong>。<strong>游戏测试作为产品发布前的最后一环，必须严格控制版本进度，确保能够按期交付</strong>。而软件测试，延期很普遍，没那么强的时间观念。</li></ul></li><li><strong>工具</strong>：<ul><li>因为用户的数值和角色状态千差万别，<strong>为了尽量模拟用户状态，测试过程中总需要造出各色各样的测试数据</strong>，<strong>游戏测试依赖更多的测试工具</strong>。而且游戏测试<strong>还需要对测试工具本身的正确性进行测试</strong>，<strong>确保工具本身正确</strong>。这点在传统软件测试行业则是不多见的。</li></ul></li><li><strong>性能</strong>：<ul><li>性能测试对游戏至关重要，无论在台式还是移动设备，卡顿会让玩家厌恶。<strong>为确保游戏流畅，客户端内存和cpu使用率在游戏测试中都要重视</strong>。而且<strong>用户的设备差异性很大，尤其是移动端</strong>。所以我们<strong>必须确保客户端的性能符合我们的预期标准</strong>。软件则没太多这方面的需求。</li></ul></li><li><strong>安全</strong>：<ul><li>无论软件还是游戏，安全都无比重要。但对游戏来说，重要程度则关乎身家性命，尤其死于<strong>外挂横行</strong>。而且<strong>游戏的客户端与服务端的交互非常频繁，数据安全更加凸显</strong>。有资源产出的地方则有安全测试的地方。<strong>防刷防外挂</strong>，是游戏测试人员始终要保持谨慎认真的对待的地方。</li><li><a class="link" href="https://blog.csdn.net/qq_65013254/article/details/133418621">如何防外挂？<i class="fas fa-external-link-alt"></i></a><ul><li>玩家行为分析：需要建立基线行为数据，以便检测与基线行为不符的异常行为，比如速度检测、自动射击检测（射击的间隔不是一个固定值）、无后座力检测、自动瞄准检测等。</li><li>签名检测（模式或特征码）：定期更新签名数据库，确保检测到新的外挂变种。（验证应用程序更新，确保新版本的应用程序的签名与旧版本匹配，以防止不合法的应用程序替换合法应用程序。</li><li>封包分析：监测游戏或者应用程序的网络通信，以检测不正常的数据包或者通信模式。（玩家接受或发送数据包的频率和速度、数据包的内容分析、数据包的大小、数据包的来源和目标等等、流量分析）</li><li>内存扫描：监测内存变化、监测代码注入、查找异样数据、内存签名比对。</li><li>硬件检测：监测可能用于外挂的硬件修改或设备。（鼠标和键盘）</li><li>自动化检测：训练模型来识别异常行为模式。（异常检测算法比如孤立森林和基于密度的离群点检测）</li><li>举报系统。</li></ul></li></ul></li><li><strong>合服（针对网游）</strong>：<ul><li>这个是游戏的独有特色。<strong>有时候服务器中用户很少，需要合并几组服务器为1组</strong>。在合服的过程中需要保证原有服务器和目标服务器中所有用户的数据信息不发生错乱。<strong>涉及到用户方方面面的数据信息</strong>，所以要测试人员务必认真。确保测试无误后，才能正式开始合服操作。</li></ul></li><li><strong>交互</strong>：<ul><li>大多针对网游，网游中很大程度的乐趣都来源于玩家与玩家之间的交互，传统软件（忽略社交软件而言）中并不多见。<strong>玩家交互的越频繁，数据之间交互的程度越高，数据之间的复杂变换及相互影响需时刻关注</strong>。</li></ul></li><li><strong>网络</strong>：<ul><li>网络对于网络游戏和软件都是必不可少的，但<strong>游戏的实时交互性比较高。所以对网络的测试要求也比较高</strong>，因为<strong>不同的网络运营商，不同地区的网络信号，甚至移动过程中不同网络的切换</strong>，这些都需认真测试，这样才能更好的提高用户体验度。</li></ul></li></ul><h1 id="测试用例"><a class="markdownIt-Anchor" href="#测试用例"></a> 测试用例</h1><h2 id="什么是测试用例"><a class="markdownIt-Anchor" href="#什么是测试用例"></a> 什么是测试用例？</h2><p>测试用例是一套有计划，有规律，有明确目的的<strong>数据集</strong>，以一条或一组出现，<strong>用于检验某程序功能是否符合预期要求（达到客户需求）</strong>，并且以此记录<strong>测试的进度和覆盖度</strong>，<strong>以可控的方式来完成对被测软件或硬件的可交付要求评估</strong>。</p><h2 id="为什么需要测试用例"><a class="markdownIt-Anchor" href="#为什么需要测试用例"></a> 为什么需要测试用例？</h2><p>关于这个问题，可以反过来先想想如果没有用例会怎么样？ 不知道测什么内容，不知道怎么测，不知道测到哪儿了，<strong>不知道覆盖度怎么样，不知道风险怎么样，不知道产出了什么</strong>，等等。想过这些问题其实你已经知道为什么需要测试用例了。<br>以下例举几个重要的原因：<br>1、用例用于实现对被测内容的梳理，<strong>完成对测试范围、质量标准的数据化定义</strong>；<br>2、用例用于记录执行过程测试结果，分析覆盖度和进度，评估测试结果，<strong>为产品质量提供数据参考和支撑</strong>；<br>3、用例用于<strong>持续改进和知识库积累</strong>，帮助团队从无到有积累经验，持续改进不足，完成对同业务及扩展业务的经验积累及持续优化，<strong>为扩展业务和团队可持续发展奠定基础</strong>。</p><h2 id="测试用例要满足哪些标准"><a class="markdownIt-Anchor" href="#测试用例要满足哪些标准"></a> 测试用例要满足哪些标准？</h2><p>关于这个问题，可以反过来先想想你觉得不好的用例是什么样的，你希望的用例是怎么样的？不统一的格式，口语化的描述，操作和结果不对应、不具象的文字说明，等等。<br>以下例举几个重要标准：<br>1、<strong>用例需要统一标准格式</strong>，同一个业务团队需要保持一致的风格，内部流转的时候能直接使用，以便实现工业化生产；<br>2、<strong>用例需要统一文字描述</strong>，不能出现口语化、地方化的描述，文化差异和地域差异是需要解决的核心冲突；<br>3、<strong>用例需要操作结果一一对应</strong>，做到操作和结果的检查是一对一的，<strong>实际情况下会出现一对多的情况，需要特别说明</strong>。<br>4、<strong>用例需要具象化的操作和结果</strong>，<strong><u>不能出现如：“点击按钮A/响应正确”这种不具象的描述，因为换人执行很可能不知道什么是正确什么是错误</u></strong>。</p><p>用例标准主要是为了能统一风格，提升能效，交付他人可执行，快速迁移和可持续积累，为建立公共用例库做准备。</p><h2 id="用例常见测试方法"><a class="markdownIt-Anchor" href="#用例常见测试方法"></a> 用例常见测试方法？</h2><h3 id="黑盒测试"><a class="markdownIt-Anchor" href="#黑盒测试"></a> 黑盒测试</h3><ul><li><p>百度：<br>黑盒测试也称功能测试，它是通过测试来检测每个功能是否都能正常使用。在测试中，<strong>把程序看作一个不能打开的黑盒子，在完全不考虑程序内部结构和内部特性的情况下，在程序接口进行测试</strong>，它只检查程序功能是否按照需求规格说明书的规定正常使用，程序是否能适当地接收输入数据而产生正确的输出信息。<strong>黑盒测试着眼于程序外部结构，不考虑内部逻辑结构</strong>，主要针对<strong>软件界面和软件功能</strong>进行测试。<br>黑盒测试是以用户的角度，从输入数据与输出数据的对应关系出发进行测试的。很明显，如果外部特性本身设计有问题或规格说明的规定有误，用黑盒测试方法是发现不了的。</p></li><li><p>个人理解：<br>黑盒就是<strong>看结果表现不看具体内部实现过程</strong>。打个比方，游戏中你点个按钮，<strong>你只需要知道点了它会有什么反应（比如买卖东西、打开某界面等）</strong>，不需要知道它发送了什么数据内容，存储了什么数据，消息怎么交互，时序怎么样，怎么加密等。。。</p></li></ul><h3 id="黑盒测试方法用例测试方法"><a class="markdownIt-Anchor" href="#黑盒测试方法用例测试方法"></a> 黑盒测试方法（用例测试方法）</h3><p>从理论上讲，黑盒测试只有采用穷举输入测试，把所有可能的输入都作为测试情况考虑，才能查出程序中所有的错误。实际上测试情况有无穷多个，人们不仅要测试所有合法的输入，而且还要对那些不合法但可能的输入进行测试。这样看来，完全测试是不可能的，所以我们要进行有针对性的测试，通过制定测试案例指导测试的实施，保证软件测试有组织、按步骤，以及有计划地进行。黑盒测试行为必须能够加以量化，才能真正保证软件质量，而测试用例就是将测试行为具体量化的方法之一。具体的黑盒测试用例设计方法包括<strong>等价类划分法、边界值分析法、错误推测法、因果图法、判定表驱动法、正交试验设计法、功能图法、场景法</strong>等。</p><ol><li><strong><mark>等价类</mark></strong><br>等价类划分的办法是<strong>把程序的输入域划分成若干部分（子集）</strong>，然后从每个部分中选取少数代表性数据作为测试用例。每一类的代表性数据在测试中的作用等价于这一类中的其他值。该方法是一种重要的，常用的黑盒测试用例设计方法。</li></ol><p><img src="https://p.ipic.vip/nru4zo.png" alt="img"></p><p>1.1 划分等价类</p><p>1） 划分等价类：<br>等价类是指某个输入域的子集合。在该子集合中，<strong>各个输入数据对于揭露程序中的错误都是等效的，并合理地假定</strong>：测试某等价类的代表值就等于对这一类其它值的测试.因此，可以把全部输入数据合理划分为若干等价类，<strong>在每一个等价类中取一个数据作为测试的输入条件，就可以用少量代表性的测试数据.取得较好的测试结果</strong>。</p><p>等价类划分可有两种不同的情况：有效等价类和无效等价类。</p><ul><li><strong>有效等价类</strong>：是指对于程序的规格说明来说是<strong>合理的</strong>，<strong>有意义的输入数据构成的集合</strong>. 利用有效等价类可检验程序是否实现了规格说明中所规定的功能和性能。</li><li><strong>无效等价类</strong>：与有效等价类的定义恰巧相反。</li></ul><p>设计测试用例时，要同时考虑这两种等价类.因为，<strong>软件不仅要能接收合理的数据，也要能经受意外的考验</strong>.这样的测试才能确保软件具有更高的可靠性。</p><p>2）划分等价类的方法：下面给出六条确定等价类的原则。<br>①<strong>在输入条件规定了</strong>取值范围或值的个数的情况下，则可以确立<strong>一个有效等价类和两个无效等价类</strong>。<br>②<strong>在输入条件规定了</strong>输入值的集合或者规定了“必须如何”的条件的情况下，可确<strong>立一个有效等价类和一个无效等价类</strong>.<br>③<strong>在输入条件是</strong>一个布尔量的情况下，可确定一个有效等价类和一个无效等价类。<br>④在规定了输入数据的一组值（假定n个），并且程序要对每一个输入值分别处理的情况下，可确立n个有效等价类和一个无效等价类。<br>⑤在规定了输入数据必须遵守的规则的情况下，可确立一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）。<br>⑥在确知已划分的等价类中各元素在程序处理中的方式不同的情况下，则应再将该等价类进一步的划分为更小的等价类。</p><p>3）设计测试用例：在确立了等价类后，可建立等价类表，列出所有划分出的等价类：</p><p>1.2 输入条件</p><p>输入条件 有效等价类 无效等价类<br>然后从划分出的等价类中按以下三个原则设计测试用例：<br>①为每一个等价类规定一个唯一的编号。<br>②设计一个新的测试用例，使其尽可能多地覆盖尚未被覆盖地有效等价类，重复这一步.直到所有的有效等价类都被覆盖为止。<br>③设计一个新的测试用例，使其仅覆盖一个尚未被覆盖的无效等价类，重复这一步.直到所有的无效等价类都被覆盖为止。</p><p>个人理解<br>等价类：1有效等价类；2无效等价类<br>简单说，等价类就分为符合规则和不符合规则2大类，2大类再细化分为满足大类中某小类，并组合循环至每个最小类。所有情况依次列出，就是最终所需等价类列表。</p><p>常见情况实例：<br>a.数量/长度：<br>密码长度限制6-20。（类似的购买数量次数、扫荡次数、格子数量等等）<br>有效等价类：6-20位；（6,7,8…）<br>无效等价类：小于6位（空，1,2…）；大于20位（21,22,23…）</p><p>b. 输入类：<br>可输入英文（小类1），字符（小类2），数字（小类3）<br>有效等价类（大类1）：（输入英文、字符、数字）<br>英文；字符；数字；英文+字符；英文+数字；字符+数字；英文+字符+数字；<br>无效等价类（大类2）：（输入非英文、字符、数字）<br>中文（小类1）</p><p>c.范围时间类：<br>1活动在19:00-20:00开启（类似的某个时间重置刷新数据，输入日期格式限制等等）<br>有效等价类：19:00-20:00活动开启<br>无效等价类：19:00之前活动不开启；20:00之后活动不开启</p><p>d.日期格式类：xx-xx-xx（00-01-01）<br>有效等价类：xx-xx-xx（01-01-01）<br>无效等价类：xxxx-xx-xx（2001-01-01）；xxxxxx（010101）；xxxxxxxx（20010101）；</p><p>e. 同类型类：<br>如<strong>穿戴不同性别装备（类似如：穿戴位置，道具类型，buff效果等等）</strong><br>有效等价类：<strong>穿戴所属性别装备、使用同类型道具、叠加同类型buff</strong><br>无效等价类：<strong>穿戴非所属性别装备、使用非同类型道具、叠加非同类型buff</strong></p><p>f. 逻辑类：<br>如常规流程和非常规流程，更改实现逻辑，如改购买请求为出售请求，这个可能涉及更改实现代码（协议安全相关，暂不考虑）<br>有效等价类：正常购买时购买请求<br>无效等价类：更改购买为出售请求<br>其他待补充。</p><ol start="2"><li><strong><mark>边界值</mark></strong><br>边界值分析是通过选择等价类边界的测试用例。边界值分析法不仅重视输入条件边界，而且也必须考虑输出域边界。它是对等价类划分方法的补充。</li></ol><p>2.1 边界值划分<br>（1）边界值分析方法的考虑：<br>长期的测试工作经验告诉我们，<strong>大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内部.因此针对各种边界情况设计测试用例，可以查出更多的错误</strong>。<br>使用边界值分析方法设计测试用例，首先应确定边界情况.通常输入和输出等价类的边界，就是应着重测试的边界情况.应当选取正好等于，刚刚大于或刚刚小于边界的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据。</p><p>（2）基于边界值分析方法选择测试用例的原则：<br>1）如果输入条件规定了值的范围，<strong>则应取刚达到这个范围的边界的值，以及刚刚超越这个范围边界的值作为测试输入数据</strong>。<br>2）如果输入条件规定了值的个数，则用<strong>最大个数,最小个数，比最小个数少一，比最大个数多一的数作为测试数据</strong>。<br>3）<strong>根据规格说明的每个输出条件，使用前面的原则1）</strong>。<br>4）<strong>根据规格说明的每个输出条件，应用前面的原则2）</strong>。<br>5）如果程序的规格说明给出的输入域或输出域是有序集合，则应选取集合的第一个元素和最后一个元素作为测试用例。<br>6）如果程序中使用了一个内部数据结构，则应当选择这个内部数据结构的边界上的值作为测试用例。<br>7）分析规格说明，找出其它可能的边界条件。</p><p>个人理解<br>边界值：基于极限情况的考虑，一般结合等价类使用，可极大减少测试用例数，提高测试效率。</p><p>常见情况实例：<br>a. 数量限制类：如密码长度限制6-20。（类似的购买数量次数、扫荡次数、格子数量等等）<br>测试数据为：<strong>临界及其±1</strong>：6，5，7，20，19，21</p><p>b. 日期时间类：如<strong>闰年，非闰年有无2.29这天（开启时间，刷新时间等等）</strong><br>测试数据为：输入<strong>2.28，2.29，2.30，根据是否闰年，判定输入是否正确</strong><br>如世界boss在18：00出现，18:30消失：<br>理论测试数据为：<strong>17:59:59查看是否刷新世界boss，18:00:00查看是否刷新世界boss，18:29:59查看世界boss是否消失，18:30:01查看世界boss是否消失。</strong>（实际可根据情况，<strong>一般调整时间至前后10s左右自然过渡</strong>）</p><ol start="3"><li><a href="https://blog.csdn.net/qq_38679705/article/details/117993032"><strong><mark>正交实验（因果图、判定表）</mark></strong></a><br>前面介绍的等价类划分方法和边界值分析方法，都是着重考虑输入条件，但未考虑输入条件之间的联系，相互组合等。 考虑输入条件之间的相互组合，可能会产生一些新的情况. 但要检查输入条件的组合不是一件容易的事情，即使把所有输入条件划分成等价类，他们之间的组合情况也相当多. <strong>因此必须考虑采用一种适合于描述对于多种条件的组合，相应产生多个动作的形式来考虑设计测试用例</strong>. 这就需要利用<strong>因果图（逻辑模型）</strong>。<br>因果图方法最终生成的就是<strong>判定表</strong>。它适合于检查程序输入条件的各种组合情况。</li></ol><p><img src="https://p.ipic.vip/f39375.png" alt="image-20240407204326841"></p><p><img src="https://p.ipic.vip/biv5ld.png" alt="image-20240407204345138"></p><p><img src="https://p.ipic.vip/1czy8d.png" alt="image-20240407204409541"></p><p>3.1 生成测试用例<br>(1) 分析软件规格说明描述中，哪些是原因（即输入条件或输入条件的等价类），哪些是结果（即输出条件），并给每个原因和结果赋予一个标识符。<br>(2) 分析软件规格说明描述中的语义。找出原因与结果之间，原因与原因之间对应的关系. 根据这些关系，画出因果图。<br>(3) 由于语法或环境限制，有些原因与原因之间，原因与结果之间的组合情况不可能出现. 为表明这些特殊情况，在因果图上用一些记号标明约束或限制条件。<br>(4) 把因果图转换为判定表。<br>(5) 把判定表的每一列拿出来作为依据，设计测试用例。</p><p><img src="https://p.ipic.vip/m6v400.png" alt="image-20240407204443207"></p><p><strong>从因果图生成的测试用例（局部，组合关系下的）包括了所有输入数据的取TRUE与取FALSE的情况，构成的测试用例数目达到最少，且测试用例数目随输入数据数目的增加而线性地增加。</strong><br>前面因果图方法中已经用到了判定表。<strong>判定表（Decision Table）<strong>是</strong>分析和表达多逻辑条件下执行不同操作的情况下的工具</strong>.在程序设计发展的初期，判定表就已被当作编写程序的辅助工具了.由于<strong>它可以把复杂的逻辑关系和多种条件组合的情况表达得既具体又明确</strong>。</p><p><strong>判定表组成法：</strong></p><ul><li>条件桩（Condition Stub）：列出了问题的所有条件.通常认为列出的条件的次序无关紧要。</li><li>动作桩（Action Stub）：列出了问题规定可能采取的操作.这些操作的排列顺序没有约束。</li><li>条件项（Condition Entry）：列出针对它左列条件的取值.在所有可能情况下的真假值。</li><li>动作项（Action Entry）：列出在条件项的各种取值情况下应该采取的动作。</li><li>规则：任何一个条件组合的特定取值及其相应要执行的操作.在判定表中贯穿条件项和动作项的一列就是一条规则.显然，判定表中列出多少组条件取值，也就有多少条规则，既条件项和动作项有多少列。</li></ul><p><strong>判定表的建立步骤</strong></p><p>①确定规则的个数。假如有n个条件.每个条件有两个取值（0,1），故有2n种规则。<br>②列出所有的条件桩和动作桩。<br>③填入条件项。<br>④填入动作项.等到初始判定表。<br>⑤简化.合并相似规则（相同动作）。</p><p>B. Beizer 指出了<strong>适合使用判定表设计测试用例的条件</strong>：</p><p>①规格说明以判定表形式给出，或很容易转换成判定表。<br>②条件的排列顺序不会也不影响执行哪些操作。<br>③规则的排列顺序不会也不影响执行哪些操作。<br>④每当某一规则的条件已经满足，并确定要执行的操作后，不必检验别的规则。<br>⑤如果某一规则得到满足要执行多个操作，这些操作的执行顺序无关紧要。</p><p><strong>正交试验设计</strong></p><p>就是使用已经造好了的正交表格来安排试验并进行数据分析的一种方法，目的是用最少的测试用例达到最高的测试覆盖率。</p><p>个人理解</p><p>关于因果图、判定表、正交实验，一般混着用，以下内容仅为个人认知，仅供参考。其使用场景大多适用于<strong>多输入、多条件情况下，选取特征组合，减少用例数且保证测试覆盖度，提升效率但又保证测试质量的方法</strong>。该方法也有一个缺点是把所有因子等权重进行正交分析，如果因子有权重差异则该方法不一定适用，看情况使用。该方法在多条件组合的时候手工分析实现相对难度较大（正交表选取方案有一篇参考公式，可单独搜索），可以借助工具如<mark>PICT</mark>（一个用例生成工具，**具体用法可自行百度）等，可有效完成该方法相关的测试用例设计。该工具相关使用方法在之后工具介绍中再补充介绍。</p><p>常见情况实例：</p><p>例1，可以从2个入口，购买2种特殊道具，有金币足和不足2种情况：<br>（因子1）游戏道具：（因子状态）B1、B2<br>（因子2）购买入口：（因子状态）A1、A2<br>（因子3）金币：（因子状态） 足（Y）、不足（N）</p><p>入口道具金币<br>A1B1足<br>A2B2不足<br>如果按理论设计用例数为： 2x2x2 = 8<br>正交实验的结果是：3 x（2-1）+1 = 4</p><p>入口道具金币<br>A1B1足<br>A1B2不足<br>A2B1不足<br>A2B2足<br>例2，因子状态数量不一致时，</p><p>游戏玩法比赛副数海底翻倍是否血流<br>四川麻将6开启是<br>天津麻将8不开启否<br>湖南麻将10<br>12<br>如果按理论设计用例数为：3x4x2x2 = 48</p><p>正交实验可选方案为（用例数3*4=12，但实际状态组合需要优化）：</p><p>游戏玩法比赛副数海底翻倍是否血流<br>四川麻将6开启是<br>四川麻将8不开启否<br>四川麻将10开启是<br>四川麻将12不开启否<br>天津麻将6开启是<br>天津麻将8不开启否<br>天津麻将10开启是<br>天津麻将12不开启否<br>湖南麻将6开启是<br>湖南麻将8不开启否<br>湖南麻将10开启是<br>湖南麻将12不开启否<br>方案讨论（思考理解）：<br>上述方案是最基本的组合，满足最重要的规则，就是每列的因子状态数出现次数一定是相同的，所以因子状态以组为单位循环出现，但上述因子状态的选取还缺乏考虑循环规则。上述的组合问题是对于后面3种因子状态循环规则是固定的，即6副/开启/是、8副/不开启/否。这样其实后3种因子状态组合相当于只有1种，<strong>所以我们实际选取时需要对因子状态进行适当的循环规则，如把副数的循环规则改为：第1轮6/8/10/12，第2轮循环改成8/10/12/6，第3轮10/12/6/8，第4轮12/6/8/10</strong>。其他因子类似，这样就能更好的实现不同状态组合覆盖。</p><p>建议：<br>实际工作中，一般把最常用的因子放前面，且因子的选取不是固定的，生产的用例数也不一样，一般考虑最常用，状态最多的，不常用的因子看情况匹配对应上同时控制循环组合。甚至也不需要考虑一定按正交实验组合提取用例，在正交实验提取用例基础上额外增加想要的组合也是有可能的。</p><ol start="4"><li><strong><mark>错误推测</mark></strong></li></ol><ul><li>错误推测法是基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法.</li><li>错误推测方法的基本思想： 列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例。 例如，在单元测试时曾列出的许多在模块中常见的错误. 以前产品测试中曾经发现的错误等，这些就是经验的总结。还有，输入数据和输出数据为0的情况. 输入表格为空格或输入表格只有一行. 这些都是容易发生错误的情况。可选择这些情况下的例子作为测试用例。</li><li>个人理解：基于一定经验积累的可能性推测，实际工作中很实用，一旦发现问题需详细找出类似功能，甚至流程上的检查。经验来源很多，多了解同类型游戏，同功能模块，不同平台等等情况下容易出错的地方，多积累就能积累经验。</li><li>常见情况举例：<ul><li>a. 流程相关<br>或许在比较完善的体系中不存在该问题，但很多中小团队有可能存在这样的问题，一方面流程不规范，同时也跟团队人员性格等等有关系。稍微有点繁琐。<br>比如：某些同事经常不检查就提交资源，然后打包打出来的包各种配置错误，代码不对，那么此时开始测试，发现各种问题，检查后发现是配置或者提交不对等等非技术原因，浪费时间，极大降低效率。如果多次如此，你肯定就知道提前提醒相关人员各个环节要做监控和检查。</li><li>b. 功能相关<br>如：<br>输入类：1.<strong>某个功能内输入框没有做限制，其他功能的输入框是否如此？</strong>；<br>调用类：2.某个功能调用某方法时报错，其他功能调用该方法是否报错？；<br>刷新类：3.当某个地方数据没有及时刷新，其他功能数据是否及时刷新？；<br>UI类：<strong>4.某界面按钮快速点击多次弹出多个对话框，其他界面按钮是否如此？</strong>；<br>其他特别：硬件相关，存储方式相关，系统平台相关等<br>（其他待补充…）</li></ul></li></ul><ol start="5"><li><strong><mark>场景法</mark></strong><br>软件几乎都是用事件触发来控制流程的，事件触发的情景基本流和备选流便形成了场景，而同一事件不同的触发顺序和处理结果就形成事件流。这种在软件设计方面的思想也可以引入到软件测试中，可以比较生动地描绘出事件触发时的情景，有利于测试设计者设计测试用例，同时使测试用例更容易理解和执行。</li></ol><p><img src="https://p.ipic.vip/tqxnmk.jpg" alt="img"></p><p>基本流和备选流：如下图所示，</p><p>图中经过用例的每条路径都用基本流和备选流来表示，直黑线表示基本流，是经过用例的最简单的路径。备选流用不同的色彩表示，一个备选流可能从基本流开始，在某个特定条件下执行，然后重新加入基本流中（如备选流1和3）；也可能起源于另一个备选流（如备选流2），或者终止用例而不再重新加入到某个流（如备选流2和4）。</p><p>个人理解<br>所谓场景，个人看来是某一组操作集的完整过程，简单理解就是某一种可能的操作过程。软件（游戏）基本上都是消息驱动（或事件触发）的，所以任何1个操作都会触发对应的响应，不同的操作方式，就形成了不同的反应组合，意味着形成了不同的可能情况，就是不同的场景。是对某个功能不同可能操作的测试，也是对功能流程逻辑的测试。<br>如：购买商品<br>基本流：选中购买-确认付费-购买成功<br>备选流1：货币不够-结束购买<br>备选流2（1的基础上）：货币不够-充值<br>基本流是基本流程，备选流在基本流程外触发或产生，可以直接结束，可以继续往其他备选流走，也可以回到基本流或结束当前备选流。跟系统的设计和复杂度有关系。</p><h2 id="用例设计方法简单总结"><a class="markdownIt-Anchor" href="#用例设计方法简单总结"></a> 用例设计方法简单总结：</h2><p>作为测试工程师，需要理解掌握各方法的原理，不断积累测试经验，综合使用上述方法，提高测试效率及测试覆盖度；<br><strong><mark>设计用例基本思路：</mark></strong><br><strong>1、首先等价类划分，减少测试工作量，输入条件和输出条件都可以等价类划分；</strong><br><strong>2、任何时候都会用到边界值分析，发现bug最多的方法；</strong><br><strong>3、错误推测法可以补充一些测试用例；</strong><br><strong>4、检查逻辑是否覆盖完全，适当补充测试用例；</strong><br><strong>5、如果条件有组合情况，从一开始就使用因果图法和判定表法；</strong><br><strong>6、参数配置类软件，用正交试验法，减少组合方式。</strong><br><strong>7、功能图法也是很好的方法，不同时间条件的有效性设计不同的测试数据。</strong><br><strong>8、业务清晰的系统，可以利用场景法贯穿整个测试案例过程，再综合使用上述方法。</strong></p><p>测试用例实际工作扩展：<br>有了上述学习，我们了解掌握了用例设计的常见方法，学会了基础"武功招式"，但我们要成为真正的武学宗师，不止学招式，还得学内功，以内功驱动招式才能无往不利。接下来的部分将是练内功的部分，在实际工作种需要特别注意。</p><h2 id="编写测试用例的前提"><a class="markdownIt-Anchor" href="#编写测试用例的前提"></a> 编写测试用例的前提</h2><p><strong>测试用例是基于交付产品的需求而写的，简单理解就是基于产品需求写的。<strong>所以编写任何测试用例的前提条件是需求，在写之前一定要深入理解需求，<strong>在不知道明确需求的情况下不要编写详细测试用例（这里仅讨论正常流程，不规范团队下的处理后续分享内容讨论）</strong>。<br>如何更好的理解需求，提高用例有效性，建议从几个点出发，<br>1、<strong>用户场景</strong>，我们的产品为了解决什么问题而设计，解决的关键问题是什么，只有理解好了用户的需求，我们才能更好的站在用户的角度去思考，去评估产品是否满提供了极致的用户体验；（该部分更多适用于固定业务，如银行、金融、医疗等领域）<br>2、<strong>团队场景</strong>，更多时候我们</strong>往往是在新设计（游戏就是不断创新）</strong>，需求来源于产品。<br>1）需求评审，尽量要有需求评审过程，需要核心人员参与技术和业务评估，以确定当前需求满足团队期望，通过需求评审后，开始编码阶段编写用例变更风险降低。2）需求风险评估，由于需求变更频繁非常常见，建议根据需求评估变更风险。有意控制用例的粒度，对成熟稳定的（做过的、市面有成熟解决方案）足够细，对变更风险高（新设计的、待验证的）的粒度粗，持续细化。<br>3）研发实现方案，需求最终实现都是研发人员完成的，所以跟研发人员沟通实现方案，能更全面直接的帮助你理解细节；<br>4）沟通，建立有效的信息沟通机制，特别是需求变化的时候要及时同步相关人员，并确认知晓。关于沟通后期分享会单独详细解读。</p><h2 id="测试用例的维护"><a class="markdownIt-Anchor" href="#测试用例的维护"></a> 测试用例的维护</h2><p>需求变更的时候需要及时维护（增加，修改，删除）测试用例，以保证新的测试用例能够检验新需求，同时保证实时性，没有因维护滞后而影响测试工作。测试过程中，也经常会发现测试用例不完善或可精简，也需及时维护测试用例。<br>实际工作中，往往没有足够的时间去编写较完善的测试用例，各个公司的规范不一样，也决定了实际应对的不同。</p><p>1）格式：<strong>用例常见写成excel，但实际情况下，可以变换形式，如时间不足的情况下，可以不编写测试用例，但一定要整理测试点，可以是excel，也可以是xmind等，待时间充足时再补充完成测试用例。</strong><br>2）记录：一般情况下，所有用例变更和执行都要记录，以此保证可跟踪到需求变化、测试的进度和覆盖度，以保证用例可使用，可跟踪测试进度。如果需要通过<strong>用例记录过程数据，还需要制定用例修改记录标准，如记录修改时间、原因，变更内容等信息</strong>。<br>3）存档：用例、用例执行情况均需要归档，一般情况下存储在公共项目各自路径下，常见目录结构：xx项目-xx版本-用例，用例可分为各模块/各用途/执行记录/变更记录等，根据情况自定义。</p><h2 id="测试用例用途分类"><a class="markdownIt-Anchor" href="#测试用例用途分类"></a> 测试用例用途分类</h2><p>我们在项目不同的阶段，可根据情况编写不同粒度的用例，以满足不同的需求。如：自测、冒烟、回归、详细测试</p><p>自测：粒度粗，符合主流程或研发帮助测试，自测用例包含主流程、核心功能，或需要研发协助修改逻辑或数据测试等时候用，主要交给产品/研发等人员使用，需要与产品研发人员沟通以符合使用人的习惯；</p><p>冒烟：粒度粗，检测主流程和核心功能，用于详细测试前的基本评估，防止存在重大问题进测浪费团队测试资源；</p><p>回归：粒度中等，检查问题修复及相关功能，或交付前checklist，用于验证问题修复或确认检查内容；</p><p>详细测试：粒度细，即常规意义的用例。</p><h2 id="测试用例的编写思路"><a class="markdownIt-Anchor" href="#测试用例的编写思路"></a> 测试用例的编写思路</h2><p>测试思路决定了测试用例的写法，通过测试用例可以看出一个人的测试思路。测试用例应当简洁高效、覆盖率高、复用性高。</p><p>1、从方向上，一般采用：由点及面，由面及点结合的方式<br>如测试某个功能，测试思路一般有2种，<br>第1种（由面及点，初期不建议使用）：入口进入，先检查所有相关界面UI，字体等资源，每个界面只管所有功能可正常跳转到下一级界面，层层深入，直到最底层<br>第2种（由点及面）：入口进入，检查某单个功能相关资源，各资源再触发新的界面或功能，直到该功能相关测试完成，再对其他功能进行测试，直到所有功能完成测试</p><p>2、从执行上，测试过程可分为：操作前、操作中、操作后<br>所有的测试过程都可以套进来，用例其实就是对操作前中后的具象化表现的测试，用例在设计时也可以参考前中后过程来进行。</p><p>3、从效率上，考虑测试顺序<br>举个例子，我们要测试：增加商品、删除商品、查找商品、修改商品。<br>顺序1：如果按照增删查改的顺序，我们的测试用例应该是：创建、创建删除、创建查询、创建修改<br>顺序2：如果按照增查改删的顺序，我们的测试用例应该是：创建、查找、修改、查找、删除<br>我们对比下这2种顺序会发现，顺序2明显优于顺序1，顺序1最少需要创建3个商品才能完成，但顺序2只需要创建1个商品，就能完成整个测试。<br>这是最常见的情况，所以有意控制执行顺序能极大提升执行效率，需要我们结合实际情况去具体分析控制。</p><p>4、从粒度上，考虑阶段和作用<br>我们在项目不同的阶段，可根据情况编写不同粒度的用例，以满足不同的需求。如：自测、冒烟、回归、详细测试<br>自测：研发中、研发完成；<br>冒烟：版本提测；<br>回归：版本补丁或版本发布前；<br>详细测试：测试阶段。</p><p>测试用例的常见格式<br>每个公司，每个人编写测试用例的格式是不同的，不同的人有不同的思维方式，编写测试用例时，只要符合自身特点，满足测试标准就行。当然在团队合作模式下，需要保持统一。</p><p>一般情况下，测试用例包含属性有：<br>用例编号，用例编号用于标记，方便后续查找；<br>功能模块，测试模块，标记模块位置，可根据需求拆分多级，建议稳定3级；<br>测试点，对功能模块的补充，测试思维的具体表现，建议初期写用例可使用该字段帮助你梳理大的方向；<br>前置条件，测试需要的前期准备或前置必备条件；<br>预期操作（输入），测试的操作过程，可以组合一组操作但和结果必须一一对应；<br>预期结果（输出），测试操作的预期结果，和操作必须一一对应；<br>实际结果，测试操作的实际结果，和操作必须一一对应；<br>备注说明，对测试用例的补充说明，可用于记录一些特殊情况或易错的经验教训；</p><p>如果要通过其进行部分管理工作，可加入测试类型，测试时间（可分多轮），测试人员等属性</p><p>用例编号、模块（测试点）、前置条件、预期操作（执行步骤）、预期结果、实际结果、备注</p><h1 id="先谈谈你对一款你喜欢的游戏的优缺点根据你喜欢的一款游戏对游戏中的某一个子系统撰写一个测试用例"><a class="markdownIt-Anchor" href="#先谈谈你对一款你喜欢的游戏的优缺点根据你喜欢的一款游戏对游戏中的某一个子系统撰写一个测试用例"></a> 先谈谈你对一款你喜欢的游戏的优缺点，根据你喜欢的一款游戏对游戏中的某一个子系统撰写一个测试用例</h1><ul><li>克鲁赛德战记：<ul><li>克鲁赛德战记是一款由 LoadComplete 制作、NHN Entertainment发行的<strong>日式像素风即时战斗消除RPG（Role-Playing Game）游戏</strong>，正式版发售至今已有3392天（快10年）。</li><li>本游戏已在2023年10月完成“终章”更新，此后进入仅运营不更新的植物人状态。望周知。</li></ul></li><li>优点：<ul><li>整个游戏制作像一部艺术品，使用像素表达所有的东西。同时剧情本身非常好看，剧情的推进是像素动画，不仅仅是大多数游戏只有一个NPC立绘+文字，感觉像看动漫。</li><li>丰富的角色发展和战斗系统。独特的玩法，表面是三消，实际上是勇士之间的组合，需要玩家根据勇士定位和技能分类去进行组合来适应不同的战场。</li><li>经常有IP联动，比如deemo和剑风传奇（舞台为以<a class="link" href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E4%B8%96%E7%B4%80">中世纪<i class="fas fa-external-link-alt"></i></a><a class="link" href="https://zh.wikipedia.org/wiki/%E6%AD%90%E6%B4%B2">欧洲<i class="fas fa-external-link-alt"></i></a>为蓝本的“剑与魔法世界”，描绘身背长度超越自身大剑的剑士格斯复仇之旅的黑暗幻想故事。）。</li></ul></li><li>缺点：<ul><li>上手有难度。可能大多数人刚开始玩会认为是收集+无脑三消类游戏，如果没有研究技能和数值的欲望可能不会继续深入。也注定了这个游戏的用户群体不是很大。</li><li>成长周期长。大部分好玩的副本对玩家能力值有一定的要求，如果没有一些特定的勇士可能根本打不过，前期成长过程相对重复，可能比较劝退。</li></ul></li></ul><h2 id="测试用例功能测试"><a class="markdownIt-Anchor" href="#测试用例功能测试"></a> 测试用例：功能测试</h2><h1 id="剧情测试"><a class="markdownIt-Anchor" href="#剧情测试"></a> <a class="link" href="https://blog.csdn.net/m0_56736369/article/details/136678979">剧情测试<i class="fas fa-external-link-alt"></i></a></h1><p>剧情测试需要关注以下内容：</p><h2 id="文本"><a class="markdownIt-Anchor" href="#文本"></a> 文本</h2><ul><li><p><strong>文本是否完整合理、逻辑通顺</strong>：</p><ul><li><p><strong>从剧情台本开始测试</strong>，阅读一遍内容看看有无看不懂的地方，以及觉得前后故事逻辑不通的地方，不符合世界观或可能被玩家举报的内容等，<strong>可先向策划提出修改意见，这样可避免制作完成后镜头流程图逻辑的大修改</strong>。</p></li><li><p>对于测试来说，保证你看到的内容完整逻辑通顺即可。</p></li></ul></li><li><p><strong>检查剧情任务中的文字相关内容</strong></p></li><li><p>错别字、语法、用词、头像</p></li><li><p>对话内容播放完整：剧情对话可能是填在dialog表中的，一般一段对话有一个对话ID，填写的格式如果不正确就无法播放出这段对话，如果不看台本或者流程图，可能不知道哪些内容是缺少的，故而需要核对台本或对着流程图依次检查。</p></li><li><p>这里不得不说，对话格式的检查无论对于策划还是测试来说，都是一个非常耗时且费眼睛的工作，本项目某长篇剧情，大约800多组对话，近6000行，策划逐行手动填写是非常容易出错的，测试来检查验证也非常耗时耗力。为此，笔者所在的项目组先是<strong>根据对话的填写规则做了对话路径拼写的表检查，用来检查填写格式错误导致内容未播放的问题</strong>；后来又做了个<strong>对话编辑器，策划只需要填写文本内容，其他的对话路径的固定格式直接生成，那么测试便可以不用那么耗时地检查填表格式，策划填表也更加省时省力</strong>。</p></li><li><p>黑屏字幕（是否有跳过）、任务描述</p></li></ul><h2 id="配音"><a class="markdownIt-Anchor" href="#配音"></a> 配音</h2><ul><li>配音路径是否正确</li><li>和台词相符</li><li>配音的播放时长</li></ul><h2 id="音乐"><a class="markdownIt-Anchor" href="#音乐"></a> 音乐</h2><ul><li>音量</li><li>是否播放正确</li></ul><h2 id="人物动作"><a class="markdownIt-Anchor" href="#人物动作"></a> 人物动作</h2><h2 id="特效"><a class="markdownIt-Anchor" href="#特效"></a> 特效</h2><h2 id="动画"><a class="markdownIt-Anchor" href="#动画"></a> 动画</h2><h2 id="镜头表现"><a class="markdownIt-Anchor" href="#镜头表现"></a> 镜头表现</h2><h2 id="场景地图"><a class="markdownIt-Anchor" href="#场景地图"></a> 场景地图</h2><h2 id="英雄联盟王者荣耀英雄测试"><a class="markdownIt-Anchor" href="#英雄联盟王者荣耀英雄测试"></a> 英雄联盟/王者荣耀英雄测试</h2><ol><li>战场数值：<ol><li>野怪（大小龙）、小兵、建筑相关属性。</li><li>包括：生命、魔法、攻击力、移动速度、提供金钱值，属性以及涉及到的相关属性的成长。</li><li>地图属性：河道距离，击杀英雄获得经济，线上资源等。</li></ol></li><li>英雄数值<ol><li>英雄初始属性及其不同等级下的<strong>成长属性</strong></li><li>天赋提供的属性，是一种加成（某些<strong>辅助英雄带来的数值加成</strong>）</li><li>英雄<strong>技能属性</strong>，技能等级数值变化，技能开启时间</li><li><strong>外部属性</strong>：<strong>装备</strong>带来的属性、<strong>战场中获得的buff</strong>属性、<strong>皮肤</strong>属性</li></ol></li><li>战场外数值<ol><li>商业化数值：英雄/皮肤价格、购买限制、夺宝（伪随机扭蛋）、碎片兑换和消耗</li><li>运营活动数值</li><li>经济系统：铭文产出消耗、金币、钻石产出消耗</li><li>系统数值。排位赛的ELO算分，段位计算；战队活跃度，奖励投放等</li></ol></li><li>假如在王者荣耀中，要求你对老夫子的大招进行测试，你能想到哪些测试点？<ol><li>技能<strong>模板</strong>：每个技能的实现机制是不尽相同的。所有需要开发各种机制的技能作为技能模板</li><li><strong>指示器</strong>：技能的释放往往有指示器的，指示的范围、指示的目标等</li><li>技能效果：技能释放前、释放后命中、释放后不命中的效果</li><li>技能<strong>伤害值</strong>：技能的基础伤害、技能每升一级的伤害、技能对装备的伤害加成等</li><li>技能<strong>冷却cd</strong>：初始技能冷却cd，使用后冷却cd</li><li>技能的<strong>伤害类型</strong>：单体类型、AOE类型、锁定类型、指向型、buff型、debuff型</li><li>技能<strong>施法音效</strong>：命中音效、飞行音效等，技能音效对游戏体验提升非常大，特别是moba类游戏，在没有技能音效的情况下，一些技能的打击效果下降许多，一些试探技能比如用技能探草丛等命中音效的缺失就导致无法识别出来了。这可能会是影响一局比赛的关键。</li><li><strong>触发特效</strong>：特效挂节点、特效效果播放情况</li><li><strong>武器依赖</strong>：某些技能的释放是否依赖与某些武器才能释放</li><li>施法<strong>动作</strong>：不同技能的施法动作是不相同的</li><li><strong>动作挂节点</strong>：施法动作挂节点，技能命中挂节点，一些技能动作是位移，所以应该是移动的动作，一些动作是原地站着的某个动作，比如钟馗的大招动作、姜子牙的大招动作</li><li>技能<strong>作用阵容</strong>：己方、敌方、中立方，比如王者里面的野怪算是中立方。</li><li>技能作用范围：地对地、地对空、空对空、空对地等情况。这主要还包括地图阻碍墙，有些空中技能是可以越过墙的，比如王者里面的鸟人、哪吒的大、韩信的跳，闪现等。像妲己的2技能魅惑就无法对空中单位生效，比如妲己无法魅惑飞行状态的鸟人。</li><li><strong>技能打断优先级</strong>：优先级相同的相互不可以打断、优先级高的可以打断优先级第的，比如击飞、晕眩、沉默等技能一般能打断一些持续性技能，比如王者里面赵云的大招可以击飞打断张良的控制大招等。妲己的1技能无法打断刘邦的大招等。</li><li>技能<strong>前摇</strong>阶段是否可打断：有些技能是蓄力型技能，比如王者中姜子牙的大招、花木兰的大招、凯的大招、刘邦的大、吕布的大、诸葛亮的大等</li><li>技能<strong>后摇</strong>阶段是否可打断：有些技能前摇可以打断，但是后摇不可以打断，同时，打断又分为主动打断和被动打断。比如王者里面上官婉儿的大，后摇就不可以打断，但是前摇在她还没飞起来前是可以打断的</li><li>技能<strong>释放过程是否可控</strong>：不受控制包括无法选中和实体不受控制；比如王者中李白的大是<strong>无法选中</strong>的，LOL里面的霞的大也是无法选中的。比如LOL里面的奥拉夫的大招也是不受控制的。</li><li>技能释放过程是否能释放其他技能：有些技能可以几个同时是否，但是有些技能是释放过程，无法释放其他技能的。比如李白的大招过程，无法再释放1、2技能。安其拉放大过程无法再释放其他技能</li><li>技能是否可移动施法：比如王者中妲己的大招就可以移动施法，但是钟馗、姜子牙、安其拉等的大招动作是不可以移动施法的。</li><li><strong>被控时，技能可用情况</strong>：大部分被控制时，技能是无法使用的，但是比如净化这个技能在被控制后就可以使用</li></ol></li></ol><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><h2 id="游戏经历"><a class="markdownIt-Anchor" href="#游戏经历"></a> 游戏经历</h2><ul><li>单机：纪念碑谷，little thief，暗影格斗，音游（deemo，兰空，cytus i/ii，mush dash），明日方舟，崩坏3，解谜（未上锁的房间），聚爆</li><li>手游：王者荣耀，英雄联盟，神之刃，天龙八部，FGO命运冠位指定</li><li>换装：暖暖环游世界，奇迹暖暖，闪耀暖暖</li></ul><h2 id="假如在一款mmorpg游戏中当一名玩家在完成一项任务的时候本来可以得到一件装备而且装备会储存在普通背包之中但这名玩家却在完成任务之后发现普通背包之中并没有出现那么这时候你会在从哪些方面来测试"><a class="markdownIt-Anchor" href="#假如在一款mmorpg游戏中当一名玩家在完成一项任务的时候本来可以得到一件装备而且装备会储存在普通背包之中但这名玩家却在完成任务之后发现普通背包之中并没有出现那么这时候你会在从哪些方面来测试"></a> 假如在一款MMORPG游戏中，当一名玩家在完成一项任务的时候本来可以得到一件装备，而且装备会储存在普通背包之中，但这名玩家却在完成任务之后发现普通背包之中并没有出现，那么这时候你会在从哪些方面来测试？</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;技术问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#技术问题&quot;&gt;&lt;/a&gt; 技术问题&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;游戏测试的基本流程（6）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分析测试&lt;strong&gt;需求&lt;/strong&gt;&lt;/li&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Advanced Programming | L4 Linear Data Structure</title>
    <link href="https://artemis727.github.io/2023/12/03/Advanced-Programming-L4-Linear-Data-Structure/"/>
    <id>https://artemis727.github.io/2023/12/03/Advanced-Programming-L4-Linear-Data-Structure/</id>
    <published>2023-12-03T11:49:54.000Z</published>
    <updated>2023-12-07T02:41:10.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="lists-and-pointer-structures"><a class="markdownIt-Anchor" href="#lists-and-pointer-structures"></a> Lists and Pointer Structures</h1><p>That is the big benefit of pointers: they allow you to point to a potentially large segment of memory with just a simple memory address.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p>We would normally say that s is a variable of the type set. That is, s is a set. This is not strictly true, however. <strong>The variable s is rather a reference (a “safe” pointer) to a set.</strong> The set constructor creates a set somewhere in memory and <strong>returns the memory location where that set starts. This is what gets stored in s.</strong></p><h2 id="arrays"><a class="markdownIt-Anchor" href="#arrays"></a> Arrays</h2><ul><li>An array is a sequential list of data. Being sequential means that each element is stored right after the previous one in memory. This involves <strong>requirements for storage</strong>.</li><li>The flip side of the coin is that <strong>arrays are very fast</strong>. No need to jump between memory locations for array, but <strong>list needs</strong>.</li></ul><h2 id="pointer-structures"><a class="markdownIt-Anchor" href="#pointer-structures"></a> Pointer structures</h2><ul><li>Pointer structures are lists of items that can be spread out in memory, each item contains one or more links to other items in the structure. What type of links these are dependent on the type of structure we have.</li><li>There are several benefits with pointer structures. First of all, they don’t require sequential storage space. Second, they can start small and grow arbitrarily as you add more nodes to the structure. However, this comes to a cost.</li></ul><h2 id="nodes"><a class="markdownIt-Anchor" href="#nodes"></a> Nodes</h2><ul><li>A node is a container of data, together with one or more links to other nodes. A link is a pointer.</li><li>The string is not really stored in the node, but is rather a pointer to the actual string:</li></ul><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/bdfa3595-5708-47b7-be38-08263facb2b9.jpg" alt="img" style="zoom: 50%;"><p>​Thus the storage requirement for this simple node is two memory addresses.</p><h2 id="finding-endpoints"><a class="markdownIt-Anchor" href="#finding-endpoints"></a> Finding endpoints</h2><ul><li>The last value.next -&gt; None, the first value.previous -&gt; None.</li></ul><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/025520c4-e6cb-4956-8715-19304a597e34.jpg" alt="img" style="zoom:50%;"><h2 id="node"><a class="markdownIt-Anchor" href="#node"></a> Node</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>: </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data=<span class="literal">None</span></span>): </span><br><span class="line">        self.data = data </span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><ul><li>The next pointer is initialized to None, meaning that unless you change the value of next, the node is going to be an end-point. This is a good idea, <strong>so that we do not forget to terminate the list properly</strong>.</li><li>One thing you may want to do is implement the <strong>str</strong> method so that it calls the <strong>str</strong> method of the contained object is called <strong>when the node object is passed to print</strong>:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>): </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data) </span><br></pre></td></tr></table></figure><h2 id="other-node-types"><a class="markdownIt-Anchor" href="#other-node-types"></a> Other node types</h2><ul><li>Sometimes we want to go from A to B, but at the same time from B to A. In that case, we add a previous pointer in addition to the next pointer:</li></ul><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/40fc4830-4045-468a-b887-612f95349437.jpg" alt="img" style="zoom:24%;"><ul><li><p>You might also be creating tiles for a tile-based game. In such a case, instead of previous and next, you might use north, south, east, and west. There are more types of pointers, but the principle is the same. Tiles at the end of the map will point to None:</p><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/9fa1def7-d820-479a-b09e-dc5c8baeeb6e.jpg" alt="img" style="zoom:33%;"></li><li><p>According to your need, if you have to move north-west, north-east, south-east, and south-west as well, just add them into your nodes.</p></li></ul><h2 id="singly-linked-lists"><a class="markdownIt-Anchor" href="#singly-linked-lists"></a> Singly linked lists</h2><ul><li>One-direction</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">current = n1</span><br><span class="line"><span class="keyword">while</span> current:</span><br><span class="line">    <span class="built_in">print</span>(current.data)</span><br><span class="line">    current = current.<span class="built_in">next</span> </span><br></pre></td></tr></table></figure><ul><li><p>Problems:</p><ul><li><p>It requires too much manual work by the programmer</p></li><li><p>It is too error-prone (this is a consequence of the first point)</p></li><li><p>Too much of the inner workings of the list is exposed to the programmer</p></li></ul></li><li><p>Create a class for singly linked lists:</p></li></ul><p>​Since the list is initially empty, set the reference to None:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">self.tail = <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># define the 'Append' function</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, data</span>):</span><br><span class="line">    <span class="comment"># Encapsulate the data in a Node</span></span><br><span class="line">    node = Node(data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> self.tail == <span class="literal">None</span>:</span><br><span class="line">      self.tail = node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      current = self.tail</span><br><span class="line">      <span class="keyword">while</span> current.<span class="built_in">next</span>:</span><br><span class="line">        current = current.<span class="built_in">next</span></span><br><span class="line">      current.<span class="built_in">next</span> = node</span><br></pre></td></tr></table></figure><ul><li>How to use:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">words = SinglyLinkedList()</span><br><span class="line">words.append(<span class="string">'egg'</span>)</span><br><span class="line">words.append(<span class="string">'ham'</span>)</span><br><span class="line">words.append(<span class="string">'spam'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># traverse the list</span></span><br><span class="line"><span class="comment"># get the first element of the list from the list itself</span></span><br><span class="line">current = words.tail</span><br><span class="line"><span class="keyword">while</span> current:</span><br><span class="line">  <span class="built_in">print</span>(current.data)</span><br><span class="line">  current = current.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="a-faster-append-operation"><a class="markdownIt-Anchor" href="#a-faster-append-operation"></a> A faster append operation</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span>:</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): </span><br><span class="line">         <span class="comment"># ...</span></span><br><span class="line">         self.tail = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, data</span>):</span><br><span class="line">        node = Node(data)</span><br><span class="line">        <span class="keyword">if</span> self.head:</span><br><span class="line">            self.head.<span class="built_in">next</span> = node</span><br><span class="line">            self.head = node</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.tail = node</span><br><span class="line">            self.head = node </span><br></pre></td></tr></table></figure><h3 id="getting-the-size-of-the-list"><a class="markdownIt-Anchor" href="#getting-the-size-of-the-list"></a> Getting the size of the list</h3><p>We add a size member to the SinglyLinkedList class, initializing it to 0 in the constructor. Then we increment size by one in the append method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span>:</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="comment"># ...</span></span><br><span class="line">         self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, data</span>):</span><br><span class="line">         <span class="comment"># ...</span></span><br><span class="line">         self.size += <span class="number">1</span> </span><br></pre></td></tr></table></figure><h3 id="improving-list-traversal"><a class="markdownIt-Anchor" href="#improving-list-traversal"></a> Improving list traversal</h3><ul><li>Client code should never need to interact with Node objects.</li><li>Creating a method that returns a generator:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">iter</span>(<span class="params">self</span>):</span><br><span class="line">    current = self.tail</span><br><span class="line">    <span class="keyword">while</span> current:</span><br><span class="line">        val = current.data</span><br><span class="line">        current = current.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">yield</span> val </span><br></pre></td></tr></table></figure><p>yield在函数中的功能类似于return，不同的是yield每次返回结果之后函数并没有退出，而是 每次遇到yield关键字后返回相应结果，并保留函数当前的运行状态，等待下一次的调用。如果 一个函数需要多次循环执行一个动作，并且每次执行的结果都是需要的，这种场景很适合使用yield实现。</p><p>版权声明：本文为CSDN博主「-牧野-」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a class="link" href="https://blog.csdn.net/dcrmg/article/details/78128041">https://blog.csdn.net/dcrmg/article/details/78128041<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words.<span class="built_in">iter</span>():</span><br><span class="line">    <span class="built_in">print</span>(word) </span><br></pre></td></tr></table></figure><h3 id="deleting-nodes"><a class="markdownIt-Anchor" href="#deleting-nodes"></a> Deleting nodes</h3><ul><li>Delete a node by the data it contains.</li></ul><p><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/a24a0505-aeb7-4fa6-b2f5-52e83df490bf.jpg" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, data</span>):</span><br><span class="line">    current = self.tail</span><br><span class="line">    prev = self.tail</span><br><span class="line">    <span class="keyword">while</span> current:</span><br><span class="line">        <span class="keyword">if</span> current.data == data:</span><br><span class="line">            <span class="keyword">if</span> current == self.tail:</span><br><span class="line">                self.tail = current.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                prev.<span class="built_in">next</span> = current.<span class="built_in">next</span></span><br><span class="line">            self.size -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        prev = current</span><br><span class="line">        current = current.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><h3 id="list-search"><a class="markdownIt-Anchor" href="#list-search"></a> List search</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, data</span>):</span><br><span class="line">     <span class="keyword">for</span> node <span class="keyword">in</span> self.<span class="built_in">iter</span>():</span><br><span class="line">         <span class="keyword">if</span> data == node:</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">False</span>  </span><br></pre></td></tr></table></figure><h3 id="clearing-a-list"><a class="markdownIt-Anchor" href="#clearing-a-list"></a> Clearing a list</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>): </span><br><span class="line">       <span class="string">""" Clear the entire list. """</span> </span><br><span class="line">       self.tail = <span class="literal">None</span> </span><br><span class="line">       self.head = <span class="literal">None</span> </span><br></pre></td></tr></table></figure><h2 id="doubly-linked-lists"><a class="markdownIt-Anchor" href="#doubly-linked-lists"></a> Doubly linked lists</h2><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/e3da69b8-ac2d-4e20-b82f-7cd375c7d8ab.jpg" alt="e3da69b8-ac2d-4e20-b82f-7cd375c7d8ab" style="zoom:33%;"><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/7d9a21da-8c82-4386-80a0-f2eabb03028f.jpg" alt="7d9a21da-8c82-4386-80a0-f2eabb03028f" style="zoom:24%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>): </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data=<span class="literal">None</span>, <span class="built_in">next</span>=<span class="literal">None</span>, prev=<span class="literal">None</span></span>): </span><br><span class="line">       self.data = data </span><br><span class="line">       self.<span class="built_in">next</span> = <span class="built_in">next</span> </span><br><span class="line">       self.prev = prev </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoublyLinkedList</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">       self.head = <span class="literal">None</span></span><br><span class="line">       self.tail = <span class="literal">None</span></span><br><span class="line">       self.count = <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li>self.head points to the beginner node of the list and self.tail points to the latest node added to the list</li><li>Append:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, data</span>): </span><br><span class="line">    <span class="string">""" Append an item to the list. """</span> </span><br><span class="line"></span><br><span class="line">       new_node = Node(data, <span class="literal">None</span>, <span class="literal">None</span>) </span><br><span class="line">       <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>: </span><br><span class="line">           self.head = new_node </span><br><span class="line">           self.tail = self.head </span><br><span class="line">       <span class="keyword">else</span>: </span><br><span class="line">           new_node.prev = self.tail </span><br><span class="line">           self.tail.<span class="built_in">next</span> = new_node </span><br><span class="line">           self.tail = new_node </span><br><span class="line"></span><br><span class="line">           self.count += <span class="number">1</span> </span><br></pre></td></tr></table></figure><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/a85e5964-91cb-4f88-9f0e-b58f32a27ca5.jpg" alt="a85e5964-91cb-4f88-9f0e-b58f32a27ca5" style="zoom:24%;"><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/e34fee50-eda1-401a-bf3b-16f472104da0.jpg" alt="e34fee50-eda1-401a-bf3b-16f472104da0" style="zoom:24%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, data</span>): </span><br><span class="line">    current = self.head </span><br><span class="line">    node_deleted = <span class="literal">False</span> </span><br><span class="line">    <span class="keyword">if</span> current <span class="keyword">is</span> <span class="literal">None</span>: </span><br><span class="line">    node_deleted = <span class="literal">False</span> </span><br><span class="line">    <span class="comment"># 要删除的是头部节点</span></span><br><span class="line">    <span class="keyword">elif</span> current.data == data: </span><br><span class="line">        self.head = current.<span class="built_in">next</span> </span><br><span class="line">        self.head.prev = <span class="literal">None</span> </span><br><span class="line">        node_deleted = <span class="literal">True</span> </span><br><span class="line">    <span class="comment"># 要删除的是尾部节点</span></span><br><span class="line">    <span class="keyword">elif</span> self.tail.data == data: </span><br><span class="line">        self.tail = self.tail.prev </span><br><span class="line">        self.tail.<span class="built_in">next</span> = <span class="literal">None</span> </span><br><span class="line">        node_deleted = <span class="literal">True</span> </span><br><span class="line">    <span class="comment"># 要删除的是中间节点，先寻找</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">while</span> current: </span><br><span class="line">            <span class="keyword">if</span> current.data == data: </span><br><span class="line">                current.prev.<span class="built_in">next</span> = current.<span class="built_in">next</span> </span><br><span class="line">                current.<span class="built_in">next</span>.prev = current.prev </span><br><span class="line">                node_deleted = <span class="literal">True</span> </span><br><span class="line">            current = current.<span class="built_in">next</span> </span><br><span class="line">    <span class="keyword">if</span> node_deleted: </span><br><span class="line">      self.count -= <span class="number">1</span>     </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># List Search  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">contain</span>(<span class="params">self, data</span>): </span><br><span class="line">      <span class="keyword">for</span> node_data <span class="keyword">in</span> self.<span class="built_in">iter</span>(): </span><br><span class="line">          <span class="keyword">if</span> data == node_data: </span><br><span class="line">              <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">          <span class="keyword">return</span> <span class="literal">False</span> </span><br></pre></td></tr></table></figure><h2 id="circular-lists"><a class="markdownIt-Anchor" href="#circular-lists"></a> Circular lists</h2><ul><li>Circular lists can be based on both singly and doubly linked lists.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, data</span>): </span><br><span class="line">      node = Node(data) </span><br><span class="line">      <span class="keyword">if</span> self.head: </span><br><span class="line">          self.head.<span class="built_in">next</span> = node </span><br><span class="line">          self.head = node </span><br><span class="line">      <span class="keyword">else</span>: </span><br><span class="line">          self.head = node </span><br><span class="line">          self.tail = node </span><br><span class="line">      self.head.<span class="built_in">next</span> = self.tail </span><br><span class="line">      self.size += <span class="number">1</span> </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, data</span>): </span><br><span class="line">        current = self.tail </span><br><span class="line">        prev = self.tail </span><br><span class="line">        <span class="keyword">while</span> prev == current <span class="keyword">or</span> prev != self.head: </span><br><span class="line">            <span class="keyword">if</span> current.data == data: </span><br><span class="line">                <span class="keyword">if</span> current == self.tail: </span><br><span class="line">                    self.tail = current.<span class="built_in">next</span> </span><br><span class="line">                    self.head.<span class="built_in">next</span> = self.tail </span><br><span class="line">                <span class="keyword">else</span>: </span><br><span class="line">                    prev.<span class="built_in">next</span> = current.<span class="built_in">next</span> </span><br><span class="line">                self.size -= <span class="number">1</span> </span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            prev = current </span><br><span class="line">            current = current.<span class="built_in">next</span> </span><br></pre></td></tr></table></figure><h3 id="iterating-through-a-circular-list"><a class="markdownIt-Anchor" href="#iterating-through-a-circular-list"></a> Iterating through a circular list</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">words = CircularList() </span><br><span class="line">words.append(<span class="string">'eggs'</span>) </span><br><span class="line">words.append(<span class="string">'ham'</span>) </span><br><span class="line">words.append(<span class="string">'spam'</span>) </span><br><span class="line"></span><br><span class="line">counter = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words.<span class="built_in">iter</span>(): </span><br><span class="line">   <span class="built_in">print</span>(word) </span><br><span class="line">   counter += <span class="number">1</span> </span><br><span class="line">   <span class="keyword">if</span> counter &gt; <span class="number">1000</span>: </span><br><span class="line">       <span class="keyword">break</span> </span><br></pre></td></tr></table></figure><h2 id="stacks"><a class="markdownIt-Anchor" href="#stacks"></a> Stacks</h2><ul><li><strong>Last-In, First-Out</strong> (<strong>LIFO</strong>) or <strong>First-In, Last-Out</strong> (<strong>FILO</strong>)</li><li>Only one end for all adding and removing</li><li>Operations<ul><li><strong>isEmpty:</strong> Returns true if the stack is empty</li><li><strong>push:</strong> <u>Adds</u> a new element</li><li><strong>pop</strong>: Returns the element added most recently and <u>removes</u> it</li></ul></li></ul><p><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781789801217/files/assets/a9ce44cc-08ed-4e39-b3ba-6a5691b22a2b.png" alt="a9ce44cc-08ed-4e39-b3ba-6a5691b22a2b"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">         self.items = []</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="keyword">return</span> self.items == []</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, item</span>):</span><br><span class="line">         <span class="comment"># 用的是append</span></span><br><span class="line">         self.items.append(item)</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="keyword">return</span> self.items.pop()</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="keyword">return</span> self.items[<span class="built_in">len</span>(self.items)-<span class="number">1</span>]</span><br><span class="line">     <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">stack = Stack()</span><br><span class="line">stack.push(<span class="string">'Red'</span>)</span><br><span class="line">stack.push(<span class="string">'Orange'</span>)</span><br><span class="line">stack.push(<span class="string">'Yellow'</span>)</span><br><span class="line">stack.push(<span class="string">'Green'</span>)</span><br><span class="line"></span><br><span class="line">stack.pop()</span><br><span class="line">&gt; <span class="string">'Yellow'</span></span><br><span class="line"></span><br><span class="line">stack.isEmpty()</span><br><span class="line">&gt; <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="time-complexity-of-stacks"><a class="markdownIt-Anchor" href="#time-complexity-of-stacks"></a> Time complexity of stacks</h3><table><thead><tr><th><strong>Operations</strong></th><th><strong>Time Complexity</strong></th></tr></thead><tbody><tr><td>push</td><td>O(1)</td></tr><tr><td>pop</td><td>O(1)</td></tr><tr><td>size</td><td>O(1)</td></tr><tr><td>peek</td><td>O(1)</td></tr></tbody></table><p>None of them depends on the size of the stack.</p><h3 id="applications-stack"><a class="markdownIt-Anchor" href="#applications-stack"></a> Applications: Stack</h3><ul><li>Browser history</li><li>Word - Undo</li></ul><h2 id="queues"><a class="markdownIt-Anchor" href="#queues"></a> Queues</h2><ul><li><strong>FIFO</strong></li><li>One end of the queue is called the <em>rear</em> and the other is called the <em>front</em>.</li><li>When elements are <strong>removed</strong> from the front, the operation is called <em>dequeue</em>.</li><li>When elements are <strong>added</strong> at the rear, the operation is called <em>enqueue</em>.</li></ul><p><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781789801217/files/assets/0da2e641-e84f-4f35-bdea-2fe3d9366528.png" alt="0da2e641-e84f-4f35-bdea-2fe3d9366528"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">      self.items = []</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="keyword">return</span> self.items == []</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, item</span>):</span><br><span class="line">    <span class="comment"># 用的是insert</span></span><br><span class="line">       self.items.insert(<span class="number">0</span>,item)</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="keyword">return</span> self.items.pop()</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">len</span>(self.items)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">queue = Queue()</span><br><span class="line">queue.enqueue(<span class="string">'Red'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'Orange'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'Yellow'</span>)</span><br><span class="line">queue.enqueue(<span class="string">'Green'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(queue.size())</span><br><span class="line">&gt; <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(queue.dequeue())</span><br><span class="line">&gt; Red</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(queue.dequeue())</span><br><span class="line">&gt; Orange</span><br></pre></td></tr></table></figure><h2 id="the-basic-idea-behind-the-use-of-stacks-and-queues"><a class="markdownIt-Anchor" href="#the-basic-idea-behind-the-use-of-stacks-and-queues"></a> The basic idea behind the use of stacks and queues</h2><p><strong>Mail</strong> stack/queue</p><ul><li><strong>stack</strong>: read the latest first. There is a chance that we never get a chance to reach a very important letter waiting for us at the lower end of the stack.</li><li><strong>queue</strong>: read the oldest first</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;lists-and-pointer-structures&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#lists-and-pointer-structures&quot;&gt;&lt;/a&gt; Lists and Pointer Structures&lt;/h</summary>
      
    
    
    
    <category term="BA" scheme="https://artemis727.github.io/categories/BA/"/>
    
    
  </entry>
  
  <entry>
    <title>DTTM | L6</title>
    <link href="https://artemis727.github.io/2023/11/30/DTTM-L6/"/>
    <id>https://artemis727.github.io/2023/11/30/DTTM-L6/</id>
    <published>2023-11-30T06:47:08.000Z</published>
    <updated>2023-12-01T06:15:38.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ideo-innovated-company"><a class="markdownIt-Anchor" href="#ideo-innovated-company"></a> IDEO (Innovated company)</h1><ul><li><p>How would you characterize IDEO’s culture and organization &amp; management?</p><table><thead><tr><th>Culture</th><th>Management</th></tr></thead><tbody><tr><td>openness, democratic</td><td>flat hierarchy</td></tr><tr><td>chaotic but focused</td><td>Time on strains</td></tr><tr><td>creative and customer-focused</td><td><strong>process</strong> (everyone is <strong>socialized</strong>, everybody believes in and sticks to design thinking)</td></tr><tr><td>willingness to share</td><td>rules</td></tr><tr><td>embrace different perspectives</td><td>diversified team</td></tr><tr><td>tolerance of failure</td><td></td></tr></tbody></table><p>Key of success: The alignment between the management and culture.</p></li></ul><h1 id="culture-eats-strategy-for-breakfast"><a class="markdownIt-Anchor" href="#culture-eats-strategy-for-breakfast"></a> “Culture eats strategy for breakfast.”</h1><p>If you don’t have the culture to support the strategies, any strategy will fail. (People &gt; Strategy)</p><ul><li>What is a culture?<ul><li>Practices</li><li>Values</li><li>Assumptions</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ideo-innovated-company&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ideo-innovated-company&quot;&gt;&lt;/a&gt; IDEO (Innovated company)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="BA" scheme="https://artemis727.github.io/categories/BA/"/>
    
    
  </entry>
  
  <entry>
    <title>DTTM | L5 Identifying Business opportunities through Design Thinking</title>
    <link href="https://artemis727.github.io/2023/11/29/DTTM-L5-Identifying-Business-opportunities-through-Design-Thinking/"/>
    <id>https://artemis727.github.io/2023/11/29/DTTM-L5-Identifying-Business-opportunities-through-Design-Thinking/</id>
    <published>2023-11-29T06:43:44.000Z</published>
    <updated>2023-11-30T02:55:33.656Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Redesigning: How can you add the entity you gained from the (potential) customer to your product?</li><li>The uses of bricks (only 3-4 pieces)<ul><li>Melt it and fire it to other artworks</li><li>Planting</li><li>Pigment</li><li>Dumbbell, weight</li><li>Pillow</li><li>Tofu</li><li>Balance the weight</li><li>As a gift</li></ul></li><li>Prototyping 快速原型<ul><li>To communicate and get feedback</li><li>Rough, Rapid (to save the time of iterations), Right</li><li>stated preferences != true preferences</li><li>revealed preferences = true preferences</li></ul></li></ul><h2 id="reflection"><a class="markdownIt-Anchor" href="#reflection"></a> Reflection</h2><ul><li>How can you apply Design Thinking in your organization?</li><li>What challenges do/will you face?</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;Redesigning: How can you add the entity you gained from the (potential) customer to your product?&lt;/li&gt;
&lt;li&gt;The uses of bricks (only</summary>
      
    
    
    
    <category term="BA" scheme="https://artemis727.github.io/categories/BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Advanced DM | W3</title>
    <link href="https://artemis727.github.io/2023/11/28/Advanced-DM-W3/"/>
    <id>https://artemis727.github.io/2023/11/28/Advanced-DM-W3/</id>
    <published>2023-11-28T11:05:56.000Z</published>
    <updated>2023-11-28T13:40:30.550Z</updated>
    
    <content type="html"><![CDATA[<ul><li>For the document datastore, it might be a problem that when you take a document, you may not put it back where before.</li></ul><h1 id="️key-value"><a class="markdownIt-Anchor" href="#️key-value"></a> ❗️Key Value</h1><ul><li>A de-constructed datastore.</li><li>Every operation must involve the key, but not necessarily the value.</li><li><strong>Speed</strong> is the core. Quick manipulation.</li><li><strong>In-memory</strong> operation<ul><li><strong>fast</strong>-paced computing/action</li><li><strong>large</strong> volume handling</li><li>suitable for <strong>transitional</strong> data, not suitable for historical data</li></ul></li><li>Data type: numbers, hashes, lists, sets, indexes, hyperloglogs, streams …</li><li>To change the datatype, purely rely on the command.</li><li>Redis database<ul><li>‘HGET’: retrieve one field each time</li><li>‘HGETALL’: field, value</li><li>‘HVALS’: key</li></ul></li><li>ER diagram</li></ul><h1 id="wide-column-datastores"><a class="markdownIt-Anchor" href="#wide-column-datastores"></a> Wide-column Datastores</h1><ul><li>timestamp</li><li>focus on availability, sacrifice the consistency</li><li>high-frequent writing but infrequent reading</li><li>3 dimensional: row, column, timestamp</li></ul><p><a class="link" href="https://help.aliyun.com/zh/tablestore/overview-of-widecolumn">https://help.aliyun.com/zh/tablestore/overview-of-widecolumn<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://zhuanlan.zhihu.com/p/604193386">https://zhuanlan.zhihu.com/p/604193386<i class="fas fa-external-link-alt"></i></a></p><p><img src="https://pic2.zhimg.com/v2-7da5c374e6f1b032475ce039f835f581_b.jpg" alt="img"></p><ul><li>In Cassandra, Column-Family is synonymous with a table.</li></ul><img src="https://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/0559007561/p11642.png" alt="img" style="zoom: 67%;"><img src="../../../Library/Application%20Support/typora-user-images/image-2023112892953190%E2%80%AFPM.png" alt="image-2023112892953190 PM" style="zoom:50%;"><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Customer=<span class="punctuation">{</span>  </span><br><span class="line">CU00002<span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">First_name<span class="number">.1</span> <span class="punctuation">:</span> “John”<span class="punctuation">,</span></span><br><span class="line">Last_name<span class="number">.2</span> <span class="punctuation">:</span> “Wick”<span class="punctuation">,</span> </span><br><span class="line">Gender<span class="number">.3</span> <span class="punctuation">:</span> “M” </span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">CU00003<span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">First_name<span class="number">.1</span> <span class="punctuation">:</span> “James”<span class="punctuation">,</span></span><br><span class="line">Last_name<span class="number">.1</span> <span class="punctuation">:</span> “Bond”<span class="punctuation">,</span> </span><br><span class="line">Gender<span class="number">.1</span> <span class="punctuation">:</span> “M” </span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></table></figure><ul><li><p>The memory data will be moved to the physical data (SS table) when the threshold is met.</p></li><li><p>When you write sth,  this will come to the buffer table 缓冲表, then go to the memory table.</p></li></ul><p><img src="https://www.scylladb.com/wp-content/uploads/sstable-diagram.png" alt="What is a SSTable? Definition & FAQs | ScyllaDB"></p><ul><li><p>排序字符串表 (SSTable) 是 ScyllaDB、Apache Cassandra 和其他 NoSQL 数据库使用的持久文件格式，用于获取存储在 memtable 中的内存中数据，对其进行排序以便快速访问，并将其以持久、有序、不可变的文件集。不可变意味着 SSTable 永远不会被修改。它们稍后会合并到新的 SSTable 中或随着数据更新而删除。</p></li><li><p>提交数据时，ScyllaDB 或 Cassandra 将更改存储在提交日志中，这是一个只允许追加的文件，因此写入速度很快。同时，数据被写入内存中的键/列数据缓存（称为内存表）。内存表会定期以磁盘上的 SSTable 形式刷新到持久存储。</p></li><li><p>数据库为每个 SSTable 创建一个索引文件和一个数据文件。索引文件有助于在排序的数据文件中更快地定位数据。</p></li><li><p>SSTable 压缩何时发生？</p><ul><li><p>随着数据不断写入和更新，会创建更多不可变的 SSTable 文件。因此，可以在磁盘上的不同 SSTable 文件中找到具有不同数据版本的相同记录。系统了解这些记录中哪些是最新的，并且仅响应最新版本的查询请求。但是，如果没有某种方法来删除过时的表，SSTable 的数量和存储的数据量将变得非常高，并且磁盘将被填满。</p></li><li><p>压缩是一个使用现有 SSTable 中找到的数据写入全新文件的过程。此过程会删除过时记录的重复数据，并且仅将同一键的最新更改写入不同的 SSTable 上，从而写入新的 SSTable 文件。删除的行（由称为逻辑删除的标记指示）或整个删除的列也会被清除，并且该过程会为压缩的 SSTable 文件创建一个新索引。</p></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;For the document datastore, it might be a problem that when you take a document, you may not put it back where before.&lt;/li&gt;
&lt;/ul&gt;
&lt;</summary>
      
    
    
    
    <category term="BA" scheme="https://artemis727.github.io/categories/BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Advanced Programming | L3 Sorting</title>
    <link href="https://artemis727.github.io/2023/11/26/Advanced-Programming-L3-Sorting/"/>
    <id>https://artemis727.github.io/2023/11/26/Advanced-Programming-L3-Sorting/</id>
    <published>2023-11-26T03:29:25.000Z</published>
    <updated>2023-12-08T10:42:27.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sorting"><a class="markdownIt-Anchor" href="#sorting"></a> Sorting</h1><ul><li>comparison sorting: bubble sort</li><li>non-comparison sorting: buck sort, pigeonhole sort</li></ul><p><img src="https://p.ipic.vip/i8bas0.png" alt="image-2023120864213563 PM"></p><h2 id="bubble-sort"><a class="markdownIt-Anchor" href="#bubble-sort"></a> Bubble Sort</h2><ul><li><em><strong>Key idea: compare adjacent elements + swap them.</strong></em> 之所以叫bubble sort是因为每次最大的都会被bubble到最右边。</li><li>A highly inefficient sorting algorithm. Time complexity: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, best: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>.</li><li>It should not be used on large lists, but performs fairly well on small lists.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iteration_number = <span class="built_in">len</span>(unordered_list)-<span class="number">1</span> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iteration_number): </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(iteration_number): </span><br><span class="line">            <span class="keyword">if</span> unordered_list[j] &gt; unordered_list[j+<span class="number">1</span>]: </span><br><span class="line">                temp = unordered_list[j] </span><br><span class="line">                unordered_list[j] = unordered_list[j+<span class="number">1</span>] </span><br><span class="line">                unordered_list[j+<span class="number">1</span>] = temp </span><br></pre></td></tr></table></figure><h2 id="insertation-sort"><a class="markdownIt-Anchor" href="#insertation-sort"></a> Insertation Sort</h2><ul><li><em><strong>Key idea: Assume a certain portion of the list is already sorted + while loop to insert the unsorted elements one by one</strong></em></li><li>The insertion sort is <strong>stable</strong> since it does not change the relative order of elements that have equal keys.</li><li>The insertion sort only <strong>requires no more memory than the list itself</strong> since it does the swapping in place.</li><li>Its worst-case value is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> and its best case is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(unsorted_list)): </span><br><span class="line">  search_index = index <span class="comment"># the position of element needs to be inserted</span></span><br><span class="line">  insert_value = unsorted_list[index] <span class="comment"># the value of the element</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># the while loop traversed the list backwards</span></span><br><span class="line">  <span class="keyword">while</span> search_index &gt; <span class="number">0</span> <span class="keyword">and</span> unsorted_list[search_index-<span class="number">1</span>] &gt;     </span><br><span class="line">        insert_value : </span><br><span class="line">      unsorted_list[search_index] = unsorted_list[search_index-<span class="number">1</span>] </span><br><span class="line">      search_index -= <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">  unsorted_list[search_index] = insert_value </span><br></pre></td></tr></table></figure><ul><li>while: if <code>search_index &gt; 0</code>, there are more elements in the sorted portion of the list, <code>unsorted_list[search_index-1] &gt; insert_value</code> makes sure the insertation is not useless.</li></ul><h2 id="selection-sort"><a class="markdownIt-Anchor" href="#selection-sort"></a> Selection Sort</h2><ul><li><em><strong>Key idea: find the smallest element in an array, interchange it with the following value of the sorted array</strong></em></li><li>Its worst and best asymptotic values being <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selection_sort</span>(<span class="params">unsorted_list</span>): </span><br><span class="line">    size_of_list = <span class="built_in">len</span>(unsorted_list) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size_of_list): </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, size_of_list): </span><br><span class="line">            <span class="keyword">if</span> unsorted_list[j] &lt; unsorted_list[i]: </span><br><span class="line">                temp = unsorted_list[i] </span><br><span class="line">                unsorted_list[i] = unsorted_list[j] </span><br><span class="line">                unsorted_list[j] = temp </span><br></pre></td></tr></table></figure><ul><li>The <em>outer for loop</em>: go through the list.</li><li>The <em>inner for loop</em>: go through the list, make the necessary swap any time that we encounter an element less than the element pointed to by <code>unsorted_list[i]</code>.</li></ul><h2 id="quick-sort"><a class="markdownIt-Anchor" href="#quick-sort"></a> Quick Sort</h2><ul><li>An <em>divide and conquer</em> algorithm.</li><li><em><strong>Key idea: 整体排序 + 分割子串 + 分体排序</strong></em></li><li>The quick sort algorithm has a <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> worst case complexity, but it is efficient when sorting large amounts of data.</li></ul><h3 id="list-partitioning-the-heart-of-quick-sort"><a class="markdownIt-Anchor" href="#list-partitioning-the-heart-of-quick-sort"></a> List partitioning (the heart of Quick Sort)</h3><ul><li>Select the pivot.</li><li>Compare all elements with the pivot.</li><li>All smaller elements come to the left of the pivot, all larger elements come to the right.</li></ul><h3 id="pivot-selection"><a class="markdownIt-Anchor" href="#pivot-selection"></a> Pivot Selection</h3><ul><li>Select the 1st, the middle or last, or randomly select one pivot DEGRADES the performance.</li></ul><h3 id="implementation"><a class="markdownIt-Anchor" href="#implementation"></a> Implementation</h3><ol><li>Define the partition function.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">unsorted_array, first_index, last_index</span>): </span><br><span class="line"></span><br><span class="line">  pivot = unsorted_array[first_index] <span class="comment"># 直接取第一个当pivot</span></span><br><span class="line">  pivot_index = first_index </span><br><span class="line">  index_of_last_element = last_index </span><br><span class="line"></span><br><span class="line">  less_than_pivot_index = index_of_last_element <span class="comment"># 从后寻找比pivot小的</span></span><br><span class="line">  greater_than_pivot_index = first_index + <span class="number">1</span> <span class="comment"># 从前寻找比pivot大的</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">    <span class="comment"># while结束的时候找出的一段都比pivot小，那么当前指的就是第一个比pivot大的</span></span><br><span class="line">    <span class="keyword">while</span> unsorted_array[greater_than_pivot_index] &lt; pivot <span class="keyword">and</span> </span><br><span class="line">          greater_than_pivot_index &lt; last_index: </span><br><span class="line">          greater_than_pivot_index += <span class="number">1</span> </span><br><span class="line">    <span class="comment"># while结束的时候找出的一段都比pivot大，那么当前指的就是第一个比pivot小的</span></span><br><span class="line">    <span class="keyword">while</span> unsorted_array[less_than_pivot_index] &gt; pivot <span class="keyword">and</span> </span><br><span class="line">          less_than_pivot_index &gt;= first_index: </span><br><span class="line">          less_than_pivot_index -= <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交换找出的第一个比pivot大的和第一个比pivot小的</span></span><br><span class="line">    <span class="keyword">if</span> greater_than_pivot_index &lt; less_than_pivot_index: </span><br><span class="line">        temp = unsorted_array[greater_than_pivot_index] </span><br><span class="line">        unsorted_array[greater_than_pivot_index] = unsorted_array[less_than_pivot_index] </span><br><span class="line">        unsorted_array[less_than_pivot_index] = temp </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 当break的时候，pivot后面的子串中，有一个分界点将小的（前）和大的（后）分开</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 将最后一个比pivot小的元素和pivot交换</span></span><br><span class="line">  unsorted_array[pivot_index] = unsorted_array[less_than_pivot_index] </span><br><span class="line">  unsorted_array[less_than_pivot_index] = pivot </span><br><span class="line">  <span class="keyword">return</span> less_than_pivot_index </span><br><span class="line"><span class="comment"># return pivot最终的位置，用于分割子串</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><ol start="2"><li>Define the body of quick sort</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort</span>(<span class="params">unsorted_array, first, last</span>): </span><br><span class="line">  <span class="keyword">if</span> last - first &lt;= <span class="number">0</span>: </span><br><span class="line">      <span class="keyword">return</span> </span><br><span class="line">  <span class="keyword">else</span>: </span><br><span class="line">    partition_point = partition(unsorted_array, first, last) <span class="comment"># 返回pivot点+完成前后排序</span></span><br><span class="line">    quick_sort(unsorted_array, first, partition_point-<span class="number">1</span>) <span class="comment"># 前面排一下</span></span><br><span class="line">    quick_sort(unsorted_array, partition_point+<span class="number">1</span>, last)<span class="comment"># 后面排一下</span></span><br></pre></td></tr></table></figure><ul><li>When the partition method is called it returns the <em>partition point</em>. This is the point in the unsorted_array <em>where all elements to the left are less than the pivot and all elements to its right are greater than it</em>.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line">[43, 3, 20, 89, 4, 77]</span><br><span class="line">[4, 3, 20, 43, 89, 77]</span><br><span class="line">[3, 4, 20, 43, 89, 77]</span><br><span class="line">[3, 4, 20, 43, 77, 89]</span><br><span class="line">[3, 4, 20, 43, 77, 89]</span><br></pre></td></tr></table></figure><h2 id="heap-sort"><a class="markdownIt-Anchor" href="#heap-sort"></a> Heap Sort</h2><ul><li><em><strong>Key idea: 构建初始堆+交换堆顶元素和末尾元素并重建堆.</strong></em></li><li>The best, worse and average: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>.</li></ul><ol><li>create a simple heap</li></ol><p><u>数据结构堆（heap）是一种优先队列。</u>使用优先队列能够以任意顺序增加对象，并且能在任意的时间（可能在增加对象的同时）找到（也可能移除）<u>最小的元素</u>，也就是说它比python的min方法更加有效率。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h = Heap() </span><br><span class="line">unsorted_list = [<span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>] </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> unsorted_list: </span><br><span class="line">    h.insert(i) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Unsorted list: {}"</span>.<span class="built_in">format</span>(unsorted_list))</span><br></pre></td></tr></table></figure><p>After loop has terminated, at the top of our heap will be element 4.</p><p>If we call the pop method on the heap object h, 10 times and store the actual elements being popped, we end up with a sorted list. After each pop operation, the heap is readjusted to maintain the heap order property.</p><ol start="2"><li>Define the <code>heap_sort()</code>.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Heap</span>: </span><br><span class="line">  ... </span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">heap_sort</span>(<span class="params">self</span>): </span><br><span class="line">      sorted_list = [] </span><br><span class="line">      <span class="keyword">for</span> node <span class="keyword">in</span> <span class="built_in">range</span>(self.size): </span><br><span class="line">          n = self.pop() </span><br><span class="line">          sorted_list.append(n) </span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> sorted_list </span><br></pre></td></tr></table></figure><h2 id="merge-sort"><a class="markdownIt-Anchor" href="#merge-sort"></a> Merge Sort</h2><ul><li>divide and conquer<img src="https://img2018.cnblogs.com/blog/1400528/201905/1400528-20190501210011723-1953669437.png" alt="img"></li></ul><ol><li>将一个序列从中间位置分成两个序列；</li><li>在将这两个子序列按照第一步继续二分下去；</li><li>直到所有子序列的长度都为1，也就是不可以再二分截止。这时候再两两合并成一个有序序列即可。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sorting&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sorting&quot;&gt;&lt;/a&gt; Sorting&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;comparison sorting: bubble sort&lt;/li&gt;
&lt;li&gt;non-compar</summary>
      
    
    
    
    <category term="BA" scheme="https://artemis727.github.io/categories/BA/"/>
    
    
  </entry>
  
  <entry>
    <title>DTTM | L4 Identifying Business opportunities through Design Thinking</title>
    <link href="https://artemis727.github.io/2023/11/23/DTTM-L4-Identifying-Business-opportunities-through-Design-Thinking/"/>
    <id>https://artemis727.github.io/2023/11/23/DTTM-L4-Identifying-Business-opportunities-through-Design-Thinking/</id>
    <published>2023-11-23T06:48:07.000Z</published>
    <updated>2023-11-24T04:05:49.959Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>You should avoid jumping into conclusions, you should take time eploring the real, root cause.</p></li><li><p>Design thinking is a way to solve problems.</p></li><li><p>Customer expectations are increasing.</p><p>n-n process. The entire customer experience is large,  you may just be optimizing a part of it.</p><p>What the company prioritize? What parts are more important to users/customers?</p><p>Eg. Hospital -&gt; Medical treatment is the most important.  -&gt; Treating HIV patients. -&gt; Key Issue: How to treat is not the most important, how to bring them into the hospital is truly important.</p><p>Plants -&gt; make customer comfortable and relieve their pain.</p><p>Where the customers’ <strong>painpoints</strong> are?</p></li><li><p>Apple &amp; Design Thinking. Change the mail interface.</p></li><li><p>HP, handphone -&gt; the window of understanding the user/customer.</p></li><li><p>Design thinking is waiting for the customer to give you the answer you are looking for.</p></li><li><p>Survey is good when you alraedy have a hypothesis and you are going to test the hypothesis.</p></li><li><p>You are developing an e-learning product for elementary school.</p><p>Who’s perspective do you need to consider?</p><ol><li>Parents, is ie expensive? is it effective?</li><li>Students, is it engaging?</li><li>Teachers, how well it help me in the class?</li></ol></li><li><p>Who is your target group? Where are you going to find your target group?</p></li><li><p>What do you look out for?</p><ol><li>walkarounds</li><li>people cares about</li><li>(most important) things that surprise you</li></ol></li><li><p>Interview exercise</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You should avoid jumping into conclusions, you should take time eploring the real, root cause.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design thinkin</summary>
      
    
    
    
    <category term="BA" scheme="https://artemis727.github.io/categories/BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Advanced DM | W2</title>
    <link href="https://artemis727.github.io/2023/11/22/Advanced-DM-W2/"/>
    <id>https://artemis727.github.io/2023/11/22/Advanced-DM-W2/</id>
    <published>2023-11-22T10:37:51.000Z</published>
    <updated>2023-11-28T11:07:42.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pacelc-theorem"><a class="markdownIt-Anchor" href="#pacelc-theorem"></a> PACELC Theorem</h1><p><img src="https://p.ipic.vip/gbv7rt.png" alt="image-2023112264911414 PM"></p><ul><li>PACELC is an extended version of CAP Theorem</li><li>If (P)artition happens, we must choose either<ul><li>(A)vailability, or</li><li>©onsistency</li></ul></li><li>(E)lse, we must choose<ul><li><strong>Low</strong> (L)atency, or</li><li>High ©onsistency</li></ul></li><li>CAP Theorem describes a distributed database, PACELC describes high-availability distributed database</li></ul><h1 id="the-case-against-sql"><a class="markdownIt-Anchor" href="#the-case-against-sql"></a> The Case Against SQL</h1><h2 id="the-common-5v-of-big-data"><a class="markdownIt-Anchor" href="#the-common-5v-of-big-data"></a> The common 5V of Big Data</h2><ul><li>Veracity -&gt; Correctness</li><li>Value</li><li>Volume -&gt; Large volume of data -&gt; hundreds/thousands gigabytes of data -&gt; how to make read/write fast?</li><li>Velocity</li><li>Variety</li></ul><p>Impedance Mismatch -&gt; cross-table information</p><h1 id="nosql"><a class="markdownIt-Anchor" href="#nosql"></a> NoSQL</h1><blockquote><p>We don’e need a schema design.</p><p>A traditional table holds records in design.</p><p>NoSQL (MongDB) offers people more choices of organizing data, achieve better partitioning.</p><p>GitHub’s LINT: Lint 工具通常用于检查代码中的潜在问题、风格违规或错误，以确保代码质量和一致性。Linting 是一种静态代码分析的方式，有助于发现并修复代码中的常见问题。</p></blockquote><h2 id="nosql-base-properties"><a class="markdownIt-Anchor" href="#nosql-base-properties"></a> NoSQL BASE properties</h2><ul><li><p><strong>Basically Available</strong>: distributed database that is always available.</p></li><li><p><strong>Soft-state</strong>: Opposition of hard-state.</p><ul><li>“Soft state” 意味着系统中的状态是不稳定的，可能会在时间上变化。(<strong>You will have difference version of truth. The data is not durable.</strong> )</li><li>数据的状态不一定需要一直保持不变，而是在某些条件下可能会发生变化。</li><li>这种状态的变化可能是暂时的，不需要永久保存或在系统宕机时保留。</li><li>在 NoSQL 数据库中，“soft state” 的一个常见例子是缓存。缓存中的数据是一种软状态，因为它可以在数据库中的数据发生变化时被更新或刷新。缓存是一种用于提高性能和减轻数据库负载的方法，但由于缓存是一种软状态，因此在一定条件下可能会失效或变得不一致。</li><li>与之相对的是 “hard state” (durability)，它指的是系统状态是稳定的，不容易随时间的推移而改变。在数据库中，“hard state” 表示数据的一致性和持久性得到了强调，确保数据在各种情况下都是可靠和可用的。</li></ul></li><li><p><strong>Eventual Consistency</strong>: The consistency will be achieved when the network is recovered.</p></li></ul><h2 id="types-of-nosql"><a class="markdownIt-Anchor" href="#types-of-nosql"></a> Types of NoSQL</h2><ul><li>Key-value store: only 2 cols, fast</li><li>Document store</li><li>Wide-column store: 3-dimension table</li><li>Graph</li></ul><h1 id="document-datastore"><a class="markdownIt-Anchor" href="#document-datastore"></a> Document datastore</h1><ul><li>Usually, a third table will be established to handle the m-n relationship.</li><li><strong>A car can be rented to many drivers, and a driver can rent different cars throughout his lifetime. How should we model this?</strong><ul><li>Car/customer谁update快就把谁作为PK，让另一个成为它的一条属性</li><li>使用MongoDB数据库</li></ul></li></ul><p><img src="https://p.ipic.vip/0zo2mi.png" alt="image-2023112282741813 PM"></p><h2 id="document-datastore-key-considerations"><a class="markdownIt-Anchor" href="#document-datastore-key-considerations"></a> Document datastore - Key Considerations</h2><p>Consider that a hospital stores patient personal details, diagnosis, prescribed medications, treatment plans, genetic material in a document datastore.</p><ul><li>What are the data retrieval entry points)?</li><li>Which piece of information is likely to be read or write frequently?</li><li>Are there certain data retrieval data entry points that must be avoided?</li></ul><ol><li><p>data retrieval entry points/query points?</p><ol><li>idnetity no/passport no</li><li>name &amp;&amp; gender &amp;&amp; dob</li><li>patientid</li></ol><p>补充：Pull out data from a medical perspective, eg. if the wrong medication is given a bunch of patents, then you may use medication &amp; duration to do the query.</p></li><li><p>which piece of info is likely to be read or write frequently?</p><ol><li>disgnosis</li><li>allergic history</li><li>prescribed mediations</li><li>physical condition, pregnant</li></ol><p>补充：When things go wrong, how do we retrieve these info?</p></li><li><p>sensitive reasons</p><ol><li>personal data: identity no, name to recognize this person</li><li>significant medical records: major surgery,</li><li>payment data: payment card information, medical insurance record</li></ol></li></ol><p>​补充：sensitive treatment plans (HIV, Covid heats), you should consider the impact on the society and business when designing the schema</p><h1 id="document-datastore-group-exercise"><a class="markdownIt-Anchor" href="#document-datastore-group-exercise"></a> Document datastore - Group Exercise</h1><p>Consider an international hotel group that operates a membership program. The program will support the members stay booking, facilities booking, redemption, and special requests received during the current stay and past bookings.</p><ul><li><p>How would you design the documents to capture these details in MongoDB? Design and prepare a short 5 minutes brief on your design.</p></li><li><p>Things to consider:</p><ul><li><p>Hotel members expect seamless service when on-site.</p></li><li><p>The hotel would like to make marketing personalized.</p></li></ul></li></ul><p>Put into a word doc and send before Sunday.</p><p>Database</p><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pacelc-theorem&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pacelc-theorem&quot;&gt;&lt;/a&gt; PACELC Theorem&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://p.ipic.vip/gbv7rt.</summary>
      
    
    
    
    <category term="BA" scheme="https://artemis727.github.io/categories/BA/"/>
    
    
  </entry>
  
  <entry>
    <title>DTTM | L3 Blockchain &amp; Crypto</title>
    <link href="https://artemis727.github.io/2023/11/21/DTTM-L3-Blockchain-Crypto/"/>
    <id>https://artemis727.github.io/2023/11/21/DTTM-L3-Blockchain-Crypto/</id>
    <published>2023-11-21T07:13:34.000Z</published>
    <updated>2023-11-21T08:27:45.050Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Advanced Programming | L2 Array</title>
    <link href="https://artemis727.github.io/2023/11/19/Advanced-Programming-L2-Array/"/>
    <id>https://artemis727.github.io/2023/11/19/Advanced-Programming-L2-Array/</id>
    <published>2023-11-19T03:24:51.000Z</published>
    <updated>2023-11-25T02:15:43.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="searching"><a class="markdownIt-Anchor" href="#searching"></a> Searching</h1><blockquote><p>It is virtually impossible to sort without some variant of a search operation. The “how of searching” is also important as it has a bearing on how quick a sorting algorithm ends up performing.</p></blockquote><p>2 broad types of searching algorithm:</p><ul><li>the list has already been sorted</li><li>the list has not been sorted</li></ul><h2 id="linear-search"><a class="markdownIt-Anchor" href="#linear-search"></a> Linear Search</h2><p>Traverse sequentially.</p><h3 id="unordered-linear-search"><a class="markdownIt-Anchor" href="#unordered-linear-search"></a> Unordered linear search</h3><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/f3ec4f7e-3aca-434f-b668-e744205346f2.jpg" alt="img" style="zoom:24%;"><p>The example above is an unordered list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">unordered_list, term</span>): </span><br><span class="line">   unordered_list_size = <span class="built_in">len</span>(unordered_list) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(unordered_list_size): </span><br><span class="line">        <span class="keyword">if</span> term == unordered_list[i]: </span><br><span class="line">            <span class="keyword">return</span> i </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span> </span><br></pre></td></tr></table></figure><p>The unordered linear search has a worst case running time of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>.</p><h3 id="ordered-linear-search"><a class="markdownIt-Anchor" href="#ordered-linear-search"></a> Ordered linear search</h3><p>Assuming the elements have been sorted in ascending order, the algorithm is reduced to the following steps:</p><ol><li>Move through the list sequentially.</li><li>If a search item is greater than the object or item currently under inspection in the loop, then quit and return None.</li></ol><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/a7fa60ee-59b5-46a5-a542-a1e69da719f5.jpg" alt="img" style="zoom:24%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">ordered_list, term</span>): </span><br><span class="line">    ordered_list_size = <span class="built_in">len</span>(ordered_list) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ordered_list_size): </span><br><span class="line">        <span class="keyword">if</span> term == ordered_list[i]: </span><br><span class="line">            <span class="keyword">return</span> i </span><br><span class="line">        <span class="keyword">elif</span> ordered_list[i] &gt; term: </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span> </span><br></pre></td></tr></table></figure><p>The worst case time complexity of an ordered linear search is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>. In general, this kind of search is considered inefficient especially when dealing with large data sets.</p><h2 id="binary-search"><a class="markdownIt-Anchor" href="#binary-search"></a> Binary search</h2><ul><li>Prerequisite: The list <strong>must</strong> has been <strong>sorted</strong>.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">ordered_list, term</span>): </span><br><span class="line"></span><br><span class="line">    size_of_list = <span class="built_in">len</span>(ordered_list) - <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    index_of_first_element = <span class="number">0</span> </span><br><span class="line">    index_of_last_element = size_of_list </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> index_of_first_element &lt;= index_of_last_element: </span><br><span class="line">        mid_point = (index_of_first_element + index_of_last_element)//<span class="number">2</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ordered_list[mid_point] == term: </span><br><span class="line">            <span class="keyword">return</span> mid_point </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> term &gt; ordered_list[mid_point]: </span><br><span class="line">            index_of_first_element = mid_point + <span class="number">1</span> </span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            index_of_last_element = mid_point - <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> index_of_first_element &gt; index_of_last_element: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> </span><br></pre></td></tr></table></figure><p>Recurisive variant:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">binary_search</span>(<span class="params">ordered_list, first_element_index, last_element_index, term</span>): </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (last_element_index &lt; first_element_index): </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        mid_point = first_element_index + ((last_element_index - first_element_index) // <span class="number">2</span>) </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ordered_list[mid_point] &gt; term: </span><br><span class="line">            <span class="keyword">return</span> binary_search(ordered_list, first_element_index, mid_point-<span class="number">1</span>,term) </span><br><span class="line">        <span class="keyword">elif</span> ordered_list[mid_point] &lt; term: </span><br><span class="line">            <span class="keyword">return</span> binary_search(ordered_list, mid_point+<span class="number">1</span>, last_element_index, term) </span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            <span class="keyword">return</span> mid_point </span><br></pre></td></tr></table></figure><p>There only distinction between the recursive binary search and the iterative binary search is the function definition and also the way in which mid_point is calculated. <strong>The calculation for the mid_point after the ((last_element_index - first_element_index) / 2) operation must add its result to first_element_index. That way we define the portion of the list to attempt the search.</strong></p><p>The binary search algorithm has a worst time complexity of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>. The half-ing of the list on each iteration follows a <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span></span></span></span> of the number of elements progression.</p><p><em>注意：求平均值若使用  (lo+hi)/2 可能存在求和溢出的问题</em></p><p>求数组中间位置的索引的时候使用 <code>int mid = lo + (hi - lo) / 2;</code> 而不是 <code>int mid = (hi + lo) / 2;</code> 目的是为了防止当数组长度过大的时候因为 <code>hi+lo</code> 造成数据溢出。</p><h2 id="interpolation-search-插值搜索"><a class="markdownIt-Anchor" href="#interpolation-search-插值搜索"></a> Interpolation search 插值搜索</h2><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/c1c0e60b-6341-4243-90c9-96c57f7d94eb.jpg" alt="img" style="zoom:24%;"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">nearest_mid</span>(<span class="params">input_list, lower_bound_index, upper_bound_index, search_value</span>): </span><br><span class="line">    <span class="keyword">return</span> lower_bound_index + (( upper_bound_index -lower_bound_index)/ (input_list[upper_bound_index] -input_list[lower_bound_index])) * (search_value -input_list[lower_bound_index]) </span><br></pre></td></tr></table></figure><p>In interpolation search, our midpoint is swayed more to the left or right.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">interpolation_search</span>(<span class="params">ordered_list, term</span>): </span><br><span class="line"></span><br><span class="line">    size_of_list = <span class="built_in">len</span>(ordered_list) - <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    index_of_first_element = <span class="number">0</span> </span><br><span class="line">    index_of_last_element = size_of_list </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> index_of_first_element &lt;= index_of_last_element: </span><br><span class="line">        mid_point = nearest_mid(ordered_list, index_of_first_element, index_of_last_element, term) </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mid_point &gt; index_of_last_element <span class="keyword">or</span> mid_point &lt; index_of_first_element: </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ordered_list[mid_point] == term: </span><br><span class="line">            <span class="keyword">return</span> mid_point </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> term &gt; ordered_list[mid_point]: </span><br><span class="line">            index_of_first_element = mid_point + <span class="number">1</span> </span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            index_of_last_element = mid_point - <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> index_of_first_element &gt; index_of_last_element: </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> </span><br></pre></td></tr></table></figure><p>The nearest_mid function makes use of a multiplication operation. This can produce values that are greater than the upper_bound_index or lower than the lower_bound_index. When this occurs, it means the search term, term, is not in the list. None is therefore returned to represent this.</p><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/588fb2c7-4f75-4d83-8d91-4e00ca71a564.jpg" alt="img" style="zoom:24%;"><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/59dd1337-3b5c-45db-80ba-4f959d83eba4.jpg" alt="img" style="zoom:24%;"><h3 id="choosing-a-search-algorithm"><a class="markdownIt-Anchor" href="#choosing-a-search-algorithm"></a> Choosing a search algorithm</h3><ul><li><p><strong>Ordered/Unordered linear search</strong>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p></li><li><p><strong>Binary Search</strong>: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><ul><li>can only be used on sorted list</li><li>not advised to be used on snall size lists</li></ul></li><li><p><strong>Interpolation search</strong> enhance the performance of binary search by increasing the ability to get to the portion of the list that houses algorithm will perform: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log(logn))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></p></li></ul><h3 id="prune-and-search"><a class="markdownIt-Anchor" href="#prune-and-search"></a> Prune and Search</h3><blockquote><p>refer to the L2 PPT</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;searching&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#searching&quot;&gt;&lt;/a&gt; Searching&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;It is virtually impossible to sort wit</summary>
      
    
    
    
    <category term="BA" scheme="https://artemis727.github.io/categories/BA/"/>
    
    
  </entry>
  
  <entry>
    <title>DTTM | L2 Block Chain Use Cases</title>
    <link href="https://artemis727.github.io/2023/11/16/DTTM-L2-Block-Chain-Use-Cases/"/>
    <id>https://artemis727.github.io/2023/11/16/DTTM-L2-Block-Chain-Use-Cases/</id>
    <published>2023-11-16T06:47:11.000Z</published>
    <updated>2023-11-21T09:19:41.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="before-class-questions"><a class="markdownIt-Anchor" href="#before-class-questions"></a> Before-class questions</h2><ul><li>[?] Is blockchain a good supporting technology/tool for:<ul><li>Dispute Resolution<ul><li>[Yes] Automate contract setup;</li><li>[No] Complext condition can not be decalred by smart contract; It can enhance the transparency of trasactions but can not avoid all the fraud.</li><li>[Conclusion] It is effective but can not be helpful in all conditions, resolve? Can’t, but can help.</li></ul></li><li>Holiday Tracking Tool<ul><li>[No] If this thing is going to change subsequently, then blockchain is not suitble, instead, it is for more objective thing.</li></ul></li><li>Know Your Customer<ul><li>Background chats would be repeated, so it can enhance th efficiency to use blockchain.</li><li>Whether banks are willing to use this kind of record.</li><li>The privacy question.</li></ul></li><li>Food provenance<ul><li>tracing the origin/source of food, eg. farm to fork</li><li>each process can’t fullt trust each other -&gt; rely on the transparency</li></ul></li><li>Track your child<ul><li>Are there existing alternative solutions? What are them?</li><li>Do you need the transparency? Who need this kind of data? Can the data be abused?</li></ul></li><li>Electronic Medical Records<ul><li>facilating the share of EMRs (Electronic Medical Record)</li></ul></li></ul></li></ul><h2 id="after-class-questions"><a class="markdownIt-Anchor" href="#after-class-questions"></a> After-class Questions</h2><ul><li><p>What challenges would arise in implementing blockchain for logistics value chain?</p><ul><li><p>Cost: infrastructure + training</p></li><li><p>Uncertain ROI: long-time</p></li><li><p>What if not all stackholders are on-bordered</p></li><li><p>Disparity in capabilities:</p></li><li><p>Interpretability</p></li><li><p>Standard requirement</p></li><li><p>Who owns + maintains</p></li><li><p>Privacy + Security</p></li></ul></li><li><p>What steps would need to be taken?</p></li><li><p>What concerns would organizations have to take part in this?</p></li></ul><h2 id="comaprasion-between-2-cases"><a class="markdownIt-Anchor" href="#comaprasion-between-2-cases"></a> Comaprasion between 2 Cases</h2><p><img src="https://p.ipic.vip/tipp30.png" alt="image-2023112132725878 PM"></p><p><img src="https://p.ipic.vip/391ese.png" alt="image-2023112132740582 PM"></p><p><img src="https://p.ipic.vip/n31bdc.png" alt="image-2023112132751196 PM"></p><ul><li>Microsoft: common value -&gt; win-win -&gt; likely to success<ul><li>We don’t need to involve all the parties in the blockchain.</li><li>Limit the num of stackholders -&gt; Better to have small number of stackholders.</li><li>Less disparity in capabilities. -&gt; Pick your stackholders wisely.</li><li>Reduce the complexibility of the stackholders and task. Go small, go slow.</li><li>IT capabilities.</li></ul></li></ul><p><img src="../../../Library/Application%20Support/typora-user-images/image-2023112142807956%E2%80%AFPM.png" alt="image-2023112142807956 PM"></p><h2 id="innovation-ecosystem"><a class="markdownIt-Anchor" href="#innovation-ecosystem"></a> Innovation Ecosystem</h2><p>Innovations that are not stand-alone products but integrated solutions, require the organization to transition from managing the innovation to <strong>managing the innovation ecosystem</strong>.</p><ul><li>It’s not whether you r ready, it’s about whether the ecosystem is ready.</li></ul><h2 id="questions"><a class="markdownIt-Anchor" href="#questions"></a> Questions</h2><ul><li>Why do u think China decided to implement retail CBDCs?<ul><li>The digital mkt in China is controled by the tech giants.</li></ul></li><li>Why do you think Singapore decided not to focus on retail CBDCs?</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;before-class-questions&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#before-class-questions&quot;&gt;&lt;/a&gt; Before-class questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[?] Is</summary>
      
    
    
    
    <category term="BA" scheme="https://artemis727.github.io/categories/BA/"/>
    
    
  </entry>
  
  <entry>
    <title>DTTM | L1 Block Chain</title>
    <link href="https://artemis727.github.io/2023/11/15/DTTM-L1-Block-Chain/"/>
    <id>https://artemis727.github.io/2023/11/15/DTTM-L1-Block-Chain/</id>
    <published>2023-11-15T06:49:38.000Z</published>
    <updated>2023-11-21T07:14:40.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="what-is-blockchain-how-it-works"><a class="markdownIt-Anchor" href="#what-is-blockchain-how-it-works"></a> What is blockchain: How it works</h1><ul><li>Blockchain is a type of distributed ledger technology = Transparancy + Immutability + Distributed consensus<ul><li>immutability: hash function</li><li>security: multiple computer nodes, have to achieve a consensus</li></ul></li><li>Centralized vs Distributed/Decentralized Ledger<ul><li>Centralized: SAP, ERP, one central server does most of the processing<ul><li>make decisions, propagate, command and control</li></ul></li><li>Decentralized: a network of server, each has a copy of the database/ledger<ul><li>no command and control, decisions are made in using a consus approach, eg. votes</li><li>open-source software communities</li></ul></li></ul></li><li>Pros &amp; Cons</li></ul><table><thead><tr><th></th><th>Centralized</th><th>Decentralized</th></tr></thead><tbody><tr><td>Pros</td><td>1. easy to control/manage; 2. faster; 4. ease of achieving standardization; 7. efficient (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>i</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi></mrow><mrow><mi>o</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{input}{output}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.38888em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.907772em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>)</td><td>3. fault-tolerance; 5. transparency; 6. lower chances of error (more eyeballs look at the info)</td></tr><tr><td>Cons</td><td>3. risk: single point of failure (prone to corruption)</td><td>2. latency</td></tr></tbody></table><p>In a word, centralized -&gt; within the control, decentralized -&gt; extremely reliable.</p><h1 id="blockchain-development"><a class="markdownIt-Anchor" href="#blockchain-development"></a> Blockchain development</h1><ul><li>Bitcoin is not blockchain, it’s an initial use case of blockchain.</li></ul><h1 id="4-elements-of-blockchain"><a class="markdownIt-Anchor" href="#4-elements-of-blockchain"></a> 4 elements of blockchain</h1><h2 id="peer-to-peer-network"><a class="markdownIt-Anchor" href="#peer-to-peer-network"></a> Peer-to-peer network</h2><ul><li>public, permissionless</li><li>What does a miner/computer node do?</li></ul><h2 id="data-management"><a class="markdownIt-Anchor" href="#data-management"></a> Data Management</h2><ul><li>How the data is structured?<ul><li>Chains or blocks.</li><li>Append only. Only can add new blocks to the blockchain.</li></ul></li></ul><h2 id="cryptography"><a class="markdownIt-Anchor" href="#cryptography"></a> Cryptography</h2><ul><li><p>Hash function</p><ul><li><p>Can only be used to encrypt. Can’t decrypt.</p></li><li><p>2 outputs are same -&gt; 2 inputs are same.</p></li></ul></li></ul><h2 id="consus-system"><a class="markdownIt-Anchor" href="#consus-system"></a> Consus system</h2><h1 id="mining"><a class="markdownIt-Anchor" href="#mining"></a> Mining</h1><p><em>Why is Ethereum able to move from Proof of Work to Proof of Stake, while Bitcoin still hasn’t?</em></p><ul><li>disparity of the ideas of founders</li></ul><h1 id="questions"><a class="markdownIt-Anchor" href="#questions"></a> Questions</h1><p>What is a node?</p><ul><li>A type of cryptocurrency</li><li>A blockchain</li><li><strong>A computer on a blockchain network</strong></li><li>An exchange</li></ul><p>What incentivizes the miners to give correct validation of transactions?</p><ul><li>A nonce</li><li><strong>A block reward</strong></li><li>Thumbs up from the community</li><li>More memory</li></ul><p>Are blockchains fully public?</p><ul><li>Yes</li><li>No</li><li><strong>It depends</strong></li></ul><p>Where is the bitcoin central server located?</p><ul><li>Washington DC</li><li>Undisclosed location</li><li>London</li><li><strong>None of the above</strong></li></ul><h1 id="blockchain-20-ethereum"><a class="markdownIt-Anchor" href="#blockchain-20-ethereum"></a> Blockchain 2.0 - Ethereum</h1><ul><li>smart contracts</li><li><em>What are the pros and cons of using such blockchain as a service platforms?</em><ul><li>pros: quick (no coding)</li><li>cons:</li></ul></li></ul><h1 id="blockchain-30"><a class="markdownIt-Anchor" href="#blockchain-30"></a> Blockchain 3.0</h1><ul><li>current stage</li><li>trade-off among scalability, decentralized and security</li></ul><img src="https://p.ipic.vip/o6qao8.png" alt="image-2023111554320797 PM" style="zoom:67%;"><ul><li><p>Layer</p><ul><li><p>在区块链领域，“layer” 通常指的是区块链技术的不同层次或协议。这样的分层结构旨在提供更多的灵活性和可扩展性，使不同的功能和应用能够在区块链上更好地运行。以下是一些常见的区块链层次或协议：</p><ol><li><p><strong>Layer 1（第一层）：</strong> 这是区块链的基本层，包括底层的区块链协议，如比特币的区块链或以太坊的主链。Layer 1 主要关注去中心化、安全性和共识机制。</p></li><li><p><strong>Layer 2（第二层）：</strong> 这是在基本区块链协议之上构建的层，用于提高交易处理速度和降低费用。Layer 2 解决方案包括诸如闪电网络（Lightning Network）和夸链协议（Cross-Chain Protocols）等。</p></li><li><p><strong>Layer 3（第三层）：</strong> 这一层涉及构建在Layer 2之上的更高级的应用和协议。它可能包括智能合约平台、分布式应用程序（DApps）以及与区块链相关的协议和服务。</p></li></ol><p>每个层次都有其独特的功能和目标，而不同的区块链项目和平台可能在不同的层次上进行创新。这种分层结构有助于提高区块链系统的可扩展性和适应性，使其更适用于各种用例。</p></li><li><p>大部分的development都是contribute to scalability的，很少有对decentralized有作用的</p></li></ul></li></ul><h1 id="questions-2"><a class="markdownIt-Anchor" href="#questions-2"></a> Questions</h1><p><img src="https://p.ipic.vip/euuif4.png" alt="image-2023111555049261 PM"></p><ul><li>F</li><li>F: It can’t do everything, cloud only means it is opearted bu some data center, it is not magical</li><li>F: not all public. Blockchain can be public or private. You can encrypt the information, even if you can see, you may can’t understand it.</li><li>?T: Blockchain is going to change the world? Maybe</li><li>F: You need development, guest fees, computing power …</li><li>F:</li><li>F:</li><li>F: not only financial, manifacturing, supply chain …</li><li>T: the technology is relatively mature, but the business may be not ready to use it</li><li>F: it denpends</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;what-is-blockchain-how-it-works&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#what-is-blockchain-how-it-works&quot;&gt;&lt;/a&gt; What is blockchain: How i</summary>
      
    
    
    
    <category term="BA" scheme="https://artemis727.github.io/categories/BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Advanced DM | W1</title>
    <link href="https://artemis727.github.io/2023/11/14/Advanced-DM-W1/"/>
    <id>https://artemis727.github.io/2023/11/14/Advanced-DM-W1/</id>
    <published>2023-11-14T10:17:27.000Z</published>
    <updated>2023-11-14T13:35:24.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="part-1"><a class="markdownIt-Anchor" href="#part-1"></a> Part 1</h1><p><img src="https://p.ipic.vip/0ldnju.png" alt="image-2023111471624281 PM"></p><ul><li>Use multiple kinds of database to obtain the optimal results</li><li>Designing database<ul><li>data limitation: the short lifespan of data</li><li>RW: catering for the requirement of reading and writing data</li><li>data ownership: business fucntion</li><li>legal requirements</li><li>Objective: support business -&gt; people + process + product</li></ul></li></ul><h1 id="part-2"><a class="markdownIt-Anchor" href="#part-2"></a> Part 2</h1><h3 id="sql-structured-query-language"><a class="markdownIt-Anchor" href="#sql-structured-query-language"></a> SQL - Structured Query Language*</h3><ul><li>SQL &amp; Relational Database: based on <strong>rows &amp; columns</strong> -&gt; <strong>table</strong></li></ul><img src="https://p.ipic.vip/argnfc.png" alt="image-2023111474443010 PM" style="zoom:50%;"><ul><li>Who use SQL? <strong>high consistency</strong> requirement</li></ul><h3 id="rdbms-relational-database-management-system"><a class="markdownIt-Anchor" href="#rdbms-relational-database-management-system"></a> RDBMS – Relational Database Management System*</h3><ul><li><p>rely on <strong>normalization</strong> to enhance the efficiency + avoid anomalies</p></li><li><p>ways to handle anomalies: <strong>break</strong> the data into different tables + keys</p></li><li><p>business requires <strong>join</strong></p></li><li><p>This is a trade-off.</p></li><li><p><strong>ACID</strong></p><ul><li>Atomicity: All actions within a transaction must succeed together or fail together.</li><li>Consistency: References and constraints made must be consistent before and after transaction.</li><li>Isolated: Changes of a transaction is not visible to observer until the changes are committed. All transactions are independent from another.</li><li>Durability: Data committed will continue to endure <strong>even after the server has been powered down</strong>.</li></ul></li><li><p>Compare with ACID: <strong>BASE</strong> properities 分布式系统</p><ul><li><strong>Basically Available（基本可用）：</strong> 系统保证基本的可用性，即使在出现故障或者部分故障的情况下，系统仍然能够继续运行。这意味着系统在某些情况下可以牺牲一些功能，但整体上仍然保持可用状态。</li><li><strong>Soft state（软状态）：</strong> 系统中的数据不需要实时一致。在一段时间内，系统的数据可以是不一致的，但最终将会达到一致状态。这使得系统更容易扩展和适应分布式环境中的变化。</li><li><strong>Eventually consistent（最终一致）：</strong> 在一定的时间范围内，系统最终会达到一致的状态。即使系统在某一时刻出现了分区或者故障，最终所有节点都会收敛到一个一致的状态。这不同于强一致性（ACID模型的一部分），在强一致性中，系统要求在任何时刻都保持一致状态。</li></ul></li></ul><h3 id="distributed-database"><a class="markdownIt-Anchor" href="#distributed-database"></a> Distributed Database</h3><ul><li>Master - Slave</li></ul><img src="https://p.ipic.vip/3uqhga.png" alt="image-2023111481242855 PM" style="zoom:50%;"><ul><li>Multi-Master</li></ul><img src="https://p.ipic.vip/itxugj.png" alt="image-2023111481314823 PM" style="zoom:50%;"><ul><li>Sharding</li></ul><img src="https://p.ipic.vip/soylzc.png" alt="image-2023111481629719 PM" style="zoom:50%;"><p>​Go by where the data are generating from: enhance the sharding efficiency</p><ul><li>Brewer’s Theorem</li></ul><img src="https://p.ipic.vip/1s2ar1.png" alt="image-2023111482056007 PM" style="zoom:50%;"><ul><li><p>at most satisfy 2 at a time</p></li><li><p><a class="link" href="https://www.scylladb.com/glossary/distributed-database/">分布式数据库<i class="fas fa-external-link-alt"></i></a>系统在遇到网络故障时可以提供<strong>一致性</strong>或<strong>可用性</strong>。换句话说，如果出现网络故障，这是一致性和可用性之间的权衡，必须提前做出选择。</p><ul><li>CP 数据库提供一致性和分区容错性，但会牺牲可用性。实际结果是，当分区发生时，系统必须使不一致的节点不可用，直到它能够解决分区。MongoDB 和 Redis 是 CP 数据库的示例。</li><li>AP 数据库提供可用性和分区容错性，但在发生故障时不提供一致性。发生分区时，所有节点仍然可用，但有些节点可能会返回旧版本的数据。CouchDB、Cassandra 和 ScyllaDB 是 AP 数据库的示例。<strong>如social media，由于数据体量很大，一些inconsistency是可以被接受的。</strong></li><li>CA 数据库提供一致性和可用性，但如果系统中的任何两个节点之间存在分区，则它无法提供容错能力。显然，这就是CAP 定理和 NoSQL 数据库的冲突之处：根据CAP 定理，没有任何NoSQL 数据库可以归类为 CA。在<a class="link" href="https://www.scylladb.com/glossary/distributed-database/">分布式数据库<i class="fas fa-external-link-alt"></i></a>中，无法避免系统分区。因此，尽管CAP定理表明CA分布式数据库是可能存在的，但目前还没有真正的CA分布式数据库系统。CAP 定理分析的现代目标应该是让系统设计者为特定应用生成一致性和可用性的最佳组合。</li></ul></li><li><p>注意：虽然ACID 和 CAP 定理中的“C”都指的是一致性，但CAP 中的一致性与 ACID 中的一致性不同。在 CAP 中，一致性意味着拥有最新的信息。ACID 中的一致性是指数据库的硬度，尽管添加了新事务并引用了不同的数据库事件，但仍能保护数据库免受损坏。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;part-1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#part-1&quot;&gt;&lt;/a&gt; Part 1&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://p.ipic.vip/0ldnju.png&quot; alt=&quot;image-20231114</summary>
      
    
    
    
    <category term="BA" scheme="https://artemis727.github.io/categories/BA/"/>
    
    
    <category term="Database" scheme="https://artemis727.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Advanced Programming | L1 Principles of Algorithm Design</title>
    <link href="https://artemis727.github.io/2023/11/09/Advanced-Programming-L1-Principles-of-Algorithm-Design/"/>
    <id>https://artemis727.github.io/2023/11/09/Advanced-Programming-L1-Principles-of-Algorithm-Design/</id>
    <published>2023-11-09T09:14:46.000Z</published>
    <updated>2023-11-18T01:32:41.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="principles-of-algorithm-design"><a class="markdownIt-Anchor" href="#principles-of-algorithm-design"></a> Principles of Algorithm Design</h1><blockquote><p>-Benjamin Baka, Python Data Structure and Algorithms, May 2017, Packt Publishing, ISBN: 9781786467355</p><p>-Chapter 3, Principles of Algorithm Design, covers how we can build additional structures with specific capabilities using the existing Python data structures. In general, the data structures we create need to conform to a number of principles. These principles include robustness, adaptability, reusability, and separating the structure from a function. We look at the role iteration plays and introduce recursive data structures.</p></blockquote><p>In summary, there are four broad reasons for studying algorithms:</p><ol><li>They are essential for computer science and <em>intelligent</em> systems.</li><li>They are important in many other domains (computational biology, economics, ecology, communications, ecology, physics, and so on).</li><li>They play a role in technology innovation.</li><li>They improve problem solving and <strong>analytical thinking</strong>.</li></ol><p>Essentially, we can say that algorithms are composed of the following four elements:</p><ul><li>Sequential operations</li><li>Actions based on the state of a data structure</li><li>Iteration, repeating an action a number of times</li><li>Recursion, calling itself on a subset of inputs</li></ul><h2 id="algorithm-design-paradigms"><a class="markdownIt-Anchor" href="#algorithm-design-paradigms"></a> Algorithm design paradigms</h2><p>In general, we can discern three broad approaches to algorithm design. They are:</p><ul><li>Divide and conquer</li><li>Greedy algorithms</li><li>Dynamic programming</li></ul><h2 id="recursion-and-backtracking"><a class="markdownIt-Anchor" href="#recursion-and-backtracking"></a> Recursion and backtracking</h2><p>At the core of a recursive function are two types of cases: <strong>base cases</strong>, which tell the recursion when to terminate, and <strong>recursive cases</strong> that call the function they are in.</p><p>A simple problem that naturally lends itself to a recursive solution is calculating factorials. The recursive factorial algorithm defines two cases: the base case when <em>n</em> is zero, and the recursive case when <em>n</em> is greater than zero.</p><p>On each recursion, a copy of the methods variables is stored in memory. Once the method returns it is removed from memory.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="comment">#test for a base case</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="comment"># make a calculation and a recursive call</span></span><br><span class="line">            f= n*factorial(n-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(f)</span><br><span class="line">        <span class="keyword">return</span>(f)</span><br><span class="line">        factorial(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/d1bd50ca-3e83-49e9-b6d2-45fb45f1f41d.png" alt="img"></p><table><thead><tr><th><strong>Recursion</strong></th><th><strong>Iteration</strong></th></tr></thead><tbody><tr><td>Terminates when a <strong>base case</strong> is reached</td><td>Terminates when a <strong>defined condition</strong> is met</td></tr><tr><td>Each recursive call requires <strong>space in memory</strong></td><td>Each iteration is <strong>not</strong> stored in memory</td></tr><tr><td>An infinite recursion results in a <strong>stack overflow error</strong></td><td>An infinite iteration will <strong>run</strong> while the hardware is powered</td></tr><tr><td>Some problems are <strong>naturally</strong> better suited to recursive solutions</td><td>Iterative solutions may not always be obvious</td></tr></tbody></table><p>This creates a trade off between processor cycles and memory usage.</p><h3 id="backtracking"><a class="markdownIt-Anchor" href="#backtracking"></a> Backtracking</h3><ul><li><p>Backtracking is a form of <strong>recursion</strong> that is particularly useful for types of problems such as traversing tree structures, where we are presented with a number of options at each node, from which we must choose one.</p></li><li><p>Subsequently we are presented with a different set of options, and depending on the series of choices made either <strong>a goal state</strong> or <strong>a dead end</strong> is reached. If it is the latter, we must backtrack to a previous node and traverse a different branch.</p></li><li><p>Backtracking is a <strong>divide and conquer method</strong> for <strong>exhaustive search</strong>.</p></li><li><p>Importantly backtracking <strong>prunes</strong> branches that cannot give a result.</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bitStr</span>(<span class="params">n, s</span>):            </span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> s </span><br><span class="line">         <span class="keyword">return</span> [ digit + bits <span class="keyword">for</span> digit <span class="keyword">in</span> bitStr(<span class="number">1</span>,s)<span class="keyword">for</span> bits <span class="keyword">in</span> bitStr(n - <span class="number">1</span>,s)] </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (bitStr(<span class="number">3</span>,<span class="string">'abc'</span>))</span><br></pre></td></tr></table></figure><p><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/639c1ffc-7591-4a28-a7f9-1f60d160551b.png" alt="img"></p><p>It is <em>backtracking</em> to uncover previously ingenerated combinations. The final string that is returned is all <em>n</em> letter combinations of the initial string.</p><h3 id="divide-and-conquer-long-multiplication"><a class="markdownIt-Anchor" href="#divide-and-conquer-long-multiplication"></a> Divide and conquer - long multiplication</h3><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/7088cd68-c359-4e0f-acbc-a23aa137cd19.png" alt="img" style="zoom:50%;"><h3 id="can-we-do-better-a-recursive-approach"><a class="markdownIt-Anchor" href="#can-we-do-better-a-recursive-approach"></a> Can we do better? A recursive approach</h3><p><strong>Karatsuba algorithm</strong></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mi>m</mi></msup><mi>a</mi><mo>+</mo><mi>b</mi><mspace linebreak="newline"></mspace><mi>y</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mi>m</mi></msup><mi>c</mi><mo>+</mo><mi>d</mi></mrow><annotation encoding="application/x-tex"> x = 10^ma + b \\ y = 10^mc + d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mi>y</mi><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><msup><mn>0</mn><mi>m</mi></msup><mi>a</mi><mo>+</mo><mi>b</mi><mo stretchy="false">)</mo><mo stretchy="false">(</mo><mn>1</mn><msup><mn>0</mn><mi>m</mi></msup><mi>c</mi><mo>+</mo><mi>d</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><msup><mn>0</mn><mi>m</mi></msup><mi>a</mi><mi>c</mi><mo>+</mo><mn>1</mn><msup><mn>0</mn><mrow><mn>2</mn><mi>m</mi></mrow></msup><mo stretchy="false">(</mo><mi>a</mi><mi>d</mi><mo>+</mo><mi>b</mi><mi>c</mi><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><mi>d</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mrow><mn>2</mn><mi>m</mi></mrow></msup><msub><mi>z</mi><mn>2</mn></msub><mo>+</mo><mi>q</mi><msup><mi>o</mi><mi>m</mi></msup><msub><mi>z</mi><mn>1</mn></msub><mo>+</mo><msub><mi>z</mi><mn>0</mn></msub><mspace linebreak="newline"></mspace><msub><mi>z</mi><mn>2</mn></msub><mo>=</mo><mi>a</mi><mi>c</mi><mo separator="true">;</mo><msub><mi>z</mi><mn>1</mn></msub><mo>=</mo><mi>a</mi><mi>d</mi><mo>+</mo><mi>b</mi><mi>c</mi><mo separator="true">;</mo><msub><mi>z</mi><mn>0</mn></msub><mo>=</mo><mi>b</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">xy = (10^ma+b)(10^mc+d) = 10^mac+10^{2m}(ad+bc)+bd = 10^{2m}z_2+qo^mz_1+z_0 \\z_2 = ac; z_1 = ad+bc; z_0 = bd</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">x</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mopen">(</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7977219999999999em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0141079999999998em;vertical-align:-0.15em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord"><span class="mord mathnormal">o</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">c</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">d</span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log10  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">karatsuba</span>(<span class="params">x,y</span>): </span><br><span class="line"></span><br><span class="line">        <span class="comment"># The base case for recursion </span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">10</span> <span class="keyword">or</span> y &lt; <span class="number">10</span>: </span><br><span class="line">            <span class="keyword">return</span> x*y     </span><br><span class="line"></span><br><span class="line">        <span class="comment">#sets n, the number of digits in the highest input number </span></span><br><span class="line">        n = <span class="built_in">max</span>(<span class="built_in">int</span>(log10(x)+<span class="number">1</span>), <span class="built_in">int</span>(log10(y)+<span class="number">1</span>)) </span><br><span class="line"></span><br><span class="line">        <span class="comment"># rounds up n/2     </span></span><br><span class="line">        n_2 = <span class="built_in">int</span>(math.ceil(n / <span class="number">2.0</span>)) </span><br><span class="line">        <span class="comment">#adds 1 if n is uneven </span></span><br><span class="line">        n = n <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> n + <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">#splits the input numbers      </span></span><br><span class="line">        a, b = <span class="built_in">divmod</span>(x, <span class="number">10</span>**n_2) </span><br><span class="line">        c, d = <span class="built_in">divmod</span>(y, <span class="number">10</span>**n_2) </span><br><span class="line"></span><br><span class="line">        <span class="comment">#applies the three recursive steps </span></span><br><span class="line">        ac = karatsuba(a,c) </span><br><span class="line">        bd = karatsuba(b,d) </span><br><span class="line">        ad_bc = karatsuba((a+b),(c+d)) - ac - bd </span><br><span class="line"></span><br><span class="line">        <span class="comment">#performs the multiplication     </span></span><br><span class="line">        <span class="keyword">return</span> (((<span class="number">10</span>**n)*ac) + bd + ((<span class="number">10</span>**n_2)*(ad_bc))) </span><br></pre></td></tr></table></figure><p>test:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(): </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>): </span><br><span class="line">                x = random.randint(<span class="number">1</span>,<span class="number">10</span>**<span class="number">5</span>) </span><br><span class="line">                y = random.randint(<span class="number">1</span>,<span class="number">10</span>**<span class="number">5</span>) </span><br><span class="line">                expected = x * y </span><br><span class="line">                result = karatsuba(x, y) </span><br><span class="line">                <span class="keyword">if</span> result != expected: </span><br><span class="line">                    <span class="keyword">return</span>(<span class="string">"failed"</span>)                 </span><br><span class="line">            <span class="keyword">return</span>(<span class="string">'ok'</span>)   </span><br></pre></td></tr></table></figure><h2 id="runtime-analysis"><a class="markdownIt-Anchor" href="#runtime-analysis"></a> Runtime Analysis</h2><ul><li><p>Runtime performance -&gt; the time (dependent on hardware) -&gt; the number of operations involved -&gt; the size of the input increases the runtime will increase in a specific way (a mathematical relationship)</p></li><li><p>One sentense summarize: <strong>The absolute time values will differ between hardware (and software) platforms; however, their relative growth will still be bound by the time complexity of the algorithm.</strong></p></li><li><p>3 guiding peinciples</p><ul><li><strong>Worst</strong> case analysis. Make no assumptions on the input data.</li><li>Ignore or suppress constant factors and lower order terms. At large inputs <strong>higher order</strong> terms dominate.</li><li>Focus on problems with <strong>large input sizes</strong>.</li></ul></li></ul><h3 id="merge-sort"><a class="markdownIt-Anchor" href="#merge-sort"></a> Merge sort</h3><ul><li>recursive, divede and conquer</li><li>3 steps:<ol><li>Recursively sort the left half of the input array.</li><li>Recursively sort the right half of the input array.</li><li>Merge two sorted sub arrays into one.</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mergeSort</span>(<span class="params">A</span>): </span><br><span class="line">        <span class="comment">#base case if the input array is one or zero just return. </span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(A) &gt; <span class="number">1</span>: </span><br><span class="line">            <span class="comment"># splitting input array </span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'splitting '</span>, A ) </span><br><span class="line">            mid = <span class="built_in">len</span>(A)//<span class="number">2</span> </span><br><span class="line">            left = A[:mid] </span><br><span class="line">            right = A[mid:] </span><br><span class="line">            <span class="comment">#recursive calls to mergeSort for left and right sub arrays                 </span></span><br><span class="line">            mergeSort(left) </span><br><span class="line">            mergeSort(right) </span><br><span class="line">            <span class="comment">#initalizes pointers for left (i) right (j) and output array (k)  </span></span><br><span class="line">    <span class="comment"># 3 initalization operations </span></span><br><span class="line">            i = j = k = <span class="number">0</span>         </span><br><span class="line">            <span class="comment">#Traverse and merges the sorted arrays </span></span><br><span class="line">            <span class="keyword">while</span> i &lt;<span class="built_in">len</span>(left) <span class="keyword">and</span> j&lt;<span class="built_in">len</span>(right): </span><br><span class="line">    <span class="comment"># if left &lt; right comparison operation  </span></span><br><span class="line">                <span class="keyword">if</span> left[i] &lt; right[j]: </span><br><span class="line">    <span class="comment"># if left &lt; right Assignment operation </span></span><br><span class="line">                    A[k]=left[i] </span><br><span class="line">                    i=i+<span class="number">1</span> </span><br><span class="line">                <span class="keyword">else</span>: </span><br><span class="line">    <span class="comment">#if right &lt;= left assignment </span></span><br><span class="line">                    A[k]= right[j] </span><br><span class="line">                    j=j+<span class="number">1</span> </span><br><span class="line">                k=k+<span class="number">1</span> </span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(left): </span><br><span class="line">    <span class="comment">#Assignment operation </span></span><br><span class="line">                A[k]=left[i] </span><br><span class="line">                i=i+<span class="number">1</span> </span><br><span class="line">                k=k+<span class="number">1</span> </span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> j&lt;<span class="built_in">len</span>(right): </span><br><span class="line">    <span class="comment">#Assignment operation </span></span><br><span class="line">                A[k]=right[j] </span><br><span class="line">                j=j+<span class="number">1</span> </span><br><span class="line">                k=k+<span class="number">1</span> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'merging '</span>, A) </span><br><span class="line">        <span class="keyword">return</span>(A)   </span><br></pre></td></tr></table></figure><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/d7e152e2-6e1c-4e1d-ba5a-947dd8863784.png" alt="img" style="zoom:50%;"><p>We will use the letter <em>m</em> or specifically <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">m_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> for the length of the input at recursive level <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>.</p><p>The number of recursive levels is exactly the number of times you need to divide <em>n</em> by 2 until you get a number that is at most 1. This is precisely the definition of log2. Since we are counting the initial recursive call as level 0, the total number of levels is log2<em>n</em> + 1.</p><ul><li>It is important to measure and compare the performance of algorithms in a platform independent way.</li><li>The actual run time will of course be dependent on the hardware on which it is run.</li><li>Counting the number of operations is important because it gives us a metric that is directly related to an algorithm’s performance, independent of the platform.</li></ul><p>For maerge sorting:</p><p>For level <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> , where <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> is an integer <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2...</mn><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">0, 1, 2 ... \log_{2}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span></span></span>, there are two <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> sub problems each of size <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><msup><mn>2</mn><mi>j</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2^j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7570857142857144em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>.</p><p>Time complexity: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">nlog_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span></span></span></span></p><h3 id="asymptotic-analysis"><a class="markdownIt-Anchor" href="#asymptotic-analysis"></a> Asymptotic analysis</h3><p>3 things that characterize an algorithm’s runtime performance:</p><ul><li>Worst case - Use an input that gives the slowest performance</li><li>Best case - Use an input that give, the best results</li><li>Average case - Assumes the input is <strong>random</strong></li></ul><p>Notations: Big O notation, Omega notation, Theta notation.</p><ul><li>Big O -&gt; upper bound</li><li>Omega -&gt; tight lower bound</li><li>Theta -&gt; upper bound and lower bound of a given function are the same</li></ul><h3 id="big-o-notation"><a class="markdownIt-Anchor" href="#big-o-notation"></a> Big O notation</h3><p>One fucntion <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> is a big O of anoher function, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>.</p><p><img src="https://p.ipic.vip/ejr3xc.png" alt="image-2023111374904028 AM"></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>C</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n) \leq C(f(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>.</li><li>The rate of growth is not important when it is less than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F(n) \leq T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>.</li></ul><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>500</mn><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>C</mi><mo>=</mo><mn>2</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>0</mn></msub><mtext>  </mtext><mi>i</mi><mi>s</mi><mtext>  </mtext><mi>a</mi><mi>p</mi><mi>p</mi><mi>r</mi><mi>o</mi><mi>x</mi><mi>i</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>e</mi><mi>l</mi><mi>y</mi><mtext>  </mtext><mn>23.</mn></mrow><annotation encoding="application/x-tex">T(n) = n^2 + 500 = O(n^2), C = 2, n_0 \; is \; approximately\; 23.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">p</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">x</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span><span class="mord">3</span><span class="mord">.</span></span></span></span></p><img src="https://p.ipic.vip/i0xjfq.png" alt="image-2023111374849625 AM" style="zoom:75%;"><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n) = O(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span> is a set of functions that include all functions whose growth rate <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo></mrow><annotation encoding="application/x-tex">\leq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>. Eg. <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> includes <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">O(n), O(nlogn), ...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span></li></ul><h3 id="time-complexity-of-a-function-the-complexity-class-of-a-function"><a class="markdownIt-Anchor" href="#time-complexity-of-a-function-the-complexity-class-of-a-function"></a> Time complexity of a function/ the complexity class of a function:</h3><p>(low -&gt; high)</p><table><thead><tr><th><strong>Complexity Class</strong></th><th><strong>Name</strong></th><th><strong>Example operations</strong></th></tr></thead><tbody><tr><td>O(1)</td><td>Constant</td><td>append, get item, set item.</td></tr><tr><td>O(log<em>n</em>)</td><td>Logarithmic</td><td>Finding an element in a sorted array.</td></tr><tr><td>O(n)</td><td>Linear</td><td>copy, insert, delete, iteration.</td></tr><tr><td><em>n</em>Log<em>n</em></td><td>Linear-Logarithmic</td><td>Sort a list, merge - sort.</td></tr><tr><td><em>n2</em></td><td>Quadratic</td><td>Find the shortest path between two nodes in a graph. Nested loops.</td></tr><tr><td><em>n3</em></td><td>Cubic</td><td>Matrix multiplication.</td></tr><tr><td>2<em>n</em></td><td>Exponential</td><td>‘Towers of Hanoi’ problem, backtracking.</td></tr></tbody></table><h3 id="composing-complexity-classes"><a class="markdownIt-Anchor" href="#composing-complexity-classes"></a> Composing complexity classes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span> </span><br><span class="line"> <span class="keyword">while</span> i &lt;= n: </span><br><span class="line">     i=i * <span class="number">2</span> </span><br><span class="line">     <span class="built_in">print</span>(i) </span><br></pre></td></tr></table></figure><p>total time = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></p><h3 id="omega-notation-ω"><a class="markdownIt-Anchor" href="#omega-notation-ω"></a> Omega notation (Ω)</h3><p><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/6f354046-1cf0-4761-aec2-c4cd1e00e274.png" alt="img"></p><h3 id="theta-notation-θ"><a class="markdownIt-Anchor" href="#theta-notation-θ"></a> Theta notation (ϴ)</h3><p><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/55c54f4d-6055-4c55-93d5-4911ec2abe2f.png" alt="img"></p><h2 id="amortized-analysis"><a class="markdownIt-Anchor" href="#amortized-analysis"></a> Amortized analysis</h2><p>2 common approaches to algorithm analysis:</p><ul><li><strong>Average case analysis</strong>: finds the average running time based on some assumptions regarding the relative <strong>frequencies</strong> of various input values. Use <strong>real-world data</strong>, or <strong>data that replicates the distribution of real-world data</strong>.</li><li><strong>Bechmarking</strong>: having an <strong>agreed</strong> set of typical inputs that are used to measure performance.</li></ul><p>Both benchmarking and average time analysis rely on having some <strong>domain knowledge</strong>.</p><p>Test the running time and plot:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">nest</span>(<span class="params">n</span>): </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n): </span><br><span class="line">            i+j </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>(<span class="params">n</span>): </span><br><span class="line">    ls=[] </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(n): </span><br><span class="line">        t=timeit.timeit(<span class="string">"nest("</span> + <span class="built_in">str</span>(n) +<span class="string">")"</span>, setup=<span class="string">"from __main__ import nest"</span>, number = <span class="number">1</span>) </span><br><span class="line">        ls.append(t) </span><br><span class="line">    <span class="keyword">return</span> ls   </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line">n=<span class="number">1000</span> </span><br><span class="line">plt.plot(test2(n)) </span><br><span class="line">plt.plot([x*x/<span class="number">10000000</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n)]) </span><br></pre></td></tr></table></figure><p><img src="https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781786467355/files/assets/16afb869-f99a-44cd-bb25-3310a7931012.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;principles-of-algorithm-design&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#principles-of-algorithm-design&quot;&gt;&lt;/a&gt; Principles of Algorithm Des</summary>
      
    
    
    
    <category term="BA" scheme="https://artemis727.github.io/categories/BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Discrete Optimization | Constraint Programming</title>
    <link href="https://artemis727.github.io/2023/11/06/Discrete-Optimization-Constraint-Programming/"/>
    <id>https://artemis727.github.io/2023/11/06/Discrete-Optimization-Constraint-Programming/</id>
    <published>2023-11-06T07:12:25.000Z</published>
    <updated>2023-11-24T08:11:34.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="intuition-computational-paradigm-map-coloring-n-queens"><a class="markdownIt-Anchor" href="#intuition-computational-paradigm-map-coloring-n-queens"></a> Intuition, computational paradigm, map coloring, n-queens</h1><ul><li><strong>Computational paradigm:</strong><ul><li><strong><u>Reduce the search space</u>. Use constraint to prune as much as possible.</strong></li><li><strong>Make a decision when <u>no more deduction</u> can be performed.</strong></li></ul></li><li>Medeling methodology: <strong>model the problem to the highest level</strong></li><li>What is a choice?<ul><li>There are many choices.</li><li>Assume a choice assigns a value to variable.</li></ul></li><li>Choices can be wrong<ul><li>The solver then backtracks, i.e. it tries another value.</li></ul></li></ul><h2 id="coloring-a-map"><a class="markdownIt-Anchor" href="#coloring-a-map"></a> Coloring a Map</h2><h3 id="split-a-question"><a class="markdownIt-Anchor" href="#split-a-question"></a> Split a question</h3><ol><li><strong>How</strong> to color this map with constraint programming?<ul><li>choose the <u>decision variables</u></li><li>express the <u>constraints</u> in terms of the decision variables</li></ul></li><li>What are the <strong>decision variables</strong>? (usually not unique)<ul><li>the <u>color</u> given to each country</li></ul></li><li>What are <strong>the domains of the decision variables</strong>?<ul><li>the domains is <u>the set of values that a variable can take</u></li><li>4 different colors</li></ul></li><li><strong>How</strong> to <strong>express</strong> <strong>the constraints</strong>?<ul><li>Specify that 2 adjacent countries cannot be given the same color</li></ul></li></ol><img src="https://p.ipic.vip/re8pra.png" alt="image-2023110642006245 PM" style="zoom:50%;"><h2 id="computational-paradigm"><a class="markdownIt-Anchor" href="#computational-paradigm"></a> Computational paradigm</h2><ul><li><p>Branch and prune</p><ul><li><p>pruning: use constraints to reduce the search space as much as possible</p></li><li><p>branching: decomposing the problem into subproblems and explore the subproblems</p></li></ul></li><li><p><strong>Important Notes!</strong></p><ul><li><strong>Complete</strong> method, not a heuristic<ul><li>given enough time, it will find a solution to a satisfaction problem</li><li>given enough time, it will find an <strong>optimal solution</strong> to an optimization problem</li><li>the computing time will grow <strong>exponentially</strong> with the increasing question scale</li></ul></li><li>Focus on <strong>feasibility</strong><ul><li>how to use constraints to prune the search space by eliminating values that cannot belong to any solution</li></ul></li></ul></li><li><p>Goal (constraint) = feasibility checking + pruning</p></li><li><p>The propagation engine</p><img src="https://p.ipic.vip/vws8vw.png" alt="image-2023110643438448 PM" style="zoom:50%;"></li></ul><h2 id="the-8-queens-problem"><a class="markdownIt-Anchor" href="#the-8-queens-problem"></a> The 8-Queens Problem</h2><ul><li>decision variables -&gt; a column has a value</li><li>constrains -&gt; one row/column/disgonal only has one</li></ul><img src="https://p.ipic.vip/eelmux.png" alt="image-2023110643754078 PM" style="zoom:50%;"><img src="https://p.ipic.vip/dfh4s7.png" alt="image-2023110644513819 PM" style="zoom:50%;"><h1 id="propagation-arithmetic-constraints-sendmoremoney"><a class="markdownIt-Anchor" href="#propagation-arithmetic-constraints-sendmoremoney"></a> Propagation, arithmetic constraints, send+more=money</h1><img src="https://p.ipic.vip/fkkk1a.png" alt="image-2023110675720183 PM" style="zoom:50%;"><h3 id="linear-constraints-over-integers"><a class="markdownIt-Anchor" href="#linear-constraints-over-integers"></a> Linear Constraints over Integers</h3><ul><li><p>Consider a constraint</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><msub><mi>x</mi><mi>n</mi></msub><mo>≥</mo><msub><mi>b</mi><mn>1</mn></msub><msub><mi>y</mi><mn>1</mn></msub><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>b</mi><mi>m</mi></msub><msub><mi>y</mi><mi>m</mi></msub><mspace linebreak="newline"></mspace><msub><mi>a</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>b</mi><mi>j</mi></msub><mo>≥</mo><mn>0</mn><mtext>  </mtext><mi>a</mi><mi>r</mi><mi>e</mi><mtext>  </mtext><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>t</mi><mi>s</mi><mspace linebreak="newline"></mspace><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>j</mi></msub><mtext>  </mtext><mi>a</mi><mi>r</mi><mi>e</mi><mtext>  </mtext><mi>v</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>s</mi><mtext>  </mtext><mi>w</mi><mi>i</mi><mi>t</mi><mi>h</mi><mtext>  </mtext><mi>d</mi><mi>o</mi><mi>m</mi><mi>a</mi><mi>i</mi><mi>n</mi><mi>s</mi><mtext>  </mtext><mi>D</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a_1x_1+...+a_nx_n \geq b_1y_1+...+b_my_m \\a_i, b_j \geq 0 \; are \; constraints \\x_i, y_j \; are \; variables \; with \; domains \; D(x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">s</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">a</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p></li><li><p>Feasibility test</p></li></ul><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>≥</mo><msub><mi>b</mi><mn>1</mn></msub><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>b</mi><mi>m</mi></msub><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>m</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a_1max(D(x_1))+...+a_nmax(D(x_n)) \geq b_1min(D(y_1)) + ... + b_mmin(D(y_m))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>l</mi><mo>=</mo><msub><mi>a</mi><mn>1</mn></msub><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>a</mi><mi>n</mi></msub><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>r</mi><mo>=</mo><msub><mi>b</mi><mn>1</mn></msub><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msub><mi>b</mi><mi>m</mi></msub><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>m</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">l=a_1max(D(x_1))+...+a_nmax(D(x_n)) \\r=b_1min(D(y_1)) + ... + b_mmin(D(y_m))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><ul><li><p>Pruning</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub><mo>≥</mo><mi>r</mi><mo>−</mo><mo stretchy="false">(</mo><mi>l</mi><mo>−</mo><msub><mi>a</mi><mi>i</mi></msub><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a_ix_i \geq r-(l-a_imax(D(x_i)))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>≥</mo><mo stretchy="false">[</mo><mfrac><mrow><mi>r</mi><mo>−</mo><mo stretchy="false">(</mo><mi>l</mi><mo>−</mo><msub><mi>a</mi><mi>i</mi></msub><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><msub><mi>a</mi><mi>i</mi></msub></mfrac><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><msub><mi>y</mi><mi>j</mi></msub><mo>≤</mo><mo stretchy="false">[</mo><mfrac><mrow><mi>l</mi><mo>−</mo><mo stretchy="false">(</mo><mi>r</mi><mo>−</mo><msub><mi>b</mi><mi>j</mi></msub><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>D</mi><mo stretchy="false">(</mo><msub><mi>y</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><mrow><mi>b</mi><mi>j</mi></mrow></mfrac><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">x_i \geq [\frac{r-(l-a_imax(D(x_i)))}{a_i}] \\y_j \leq [\frac{l-(r-b_jmin(D(y_j)))}{bj}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7859700000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.263em;vertical-align:-0.8360000000000001em;"></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.922078em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.30744em;vertical-align:-0.8804400000000001em;"></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span></span></span></span></p></li></ul><h1 id="refication-element-constraint-magic-series-stable-marriage"><a class="markdownIt-Anchor" href="#refication-element-constraint-magic-series-stable-marriage"></a> Refication, element constraint, magic series, stable marriage</h1><h3 id="magic-series"><a class="markdownIt-Anchor" href="#magic-series"></a> Magic Series</h3><img src="https://p.ipic.vip/j3d622.png" alt="image-20231107104748581 PM" style="zoom:50%;"><img src="https://p.ipic.vip/7z2ppw.png" alt="image-20231107104947699 PM" style="zoom:50%;"><img src="https://p.ipic.vip/gy2mx8.png" alt="image-20231107105128792 PM" style="zoom:50%;"><img src="https://p.ipic.vip/cul6c5.png" alt="image-20231107105322087 PM" style="zoom:50%;"><h3 id="stable-marriages"><a class="markdownIt-Anchor" href="#stable-marriages"></a> Stable Marriages</h3><h3 id="the-basic-element-constraints"><a class="markdownIt-Anchor" href="#the-basic-element-constraints"></a> The Basic Element Constraints</h3><h1 id="global-constraint-intuition-table-constraint-sudoku"><a class="markdownIt-Anchor" href="#global-constraint-intuition-table-constraint-sudoku"></a> Global constraint intuition, table constraint, sudoku</h1><h2 id="global-constraints"><a class="markdownIt-Anchor" href="#global-constraints"></a> Global constraints</h2><p>eg. alldifferent(x1, …, xn)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span> R = <span class="number">1</span>, ... <span class="number">8</span>;</span><br><span class="line">var{<span class="built_in">int</span>} row[R] <span class="keyword">in</span> R;</span><br><span class="line">solve {</span><br><span class="line">  forall (i <span class="keyword">in</span> R, j <span class="keyword">in</span> R, i &lt; j) {</span><br><span class="line">    row[i] != row[j];</span><br><span class="line">    row[i] + i != row[j] + j;</span><br><span class="line">    row[i] - i != row[j] - j;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span> R = <span class="number">1</span>, ... <span class="number">8</span>;</span><br><span class="line">var{<span class="built_in">int</span>} row[R] <span class="keyword">in</span> R;</span><br><span class="line">solve {</span><br><span class="line">  alldifferent(row);</span><br><span class="line">  alldifferent(<span class="built_in">all</span>(i <span class="keyword">in</span> R) row[i]+i);</span><br><span class="line">  alldifferent(<span class="built_in">all</span>(i <span class="keyword">in</span> R) row[i]-i);</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>Global constraints make it possible to discover infeasibility earlier.</p><p>Global constraints make it possible to prune the search space more.</p><h2 id="sudoku"><a class="markdownIt-Anchor" href="#sudoku"></a> Sudoku</h2><h2 id="table-constraint"><a class="markdownIt-Anchor" href="#table-constraint"></a> Table Constraint</h2><ul><li>the simplest global constraint</li></ul><h2 id="finding-optimal-solutions"><a class="markdownIt-Anchor" href="#finding-optimal-solutions"></a> Finding optimal solutions</h2><ul><li>focus on constraint programming: feasibility</li><li>how to optimize?<ul><li>solve a sequence of satisfaction problems</li><li>find a solution</li><li>impose a constraint that the next solution must be better (minimize the num of color -&gt; 3 is better than 4)</li></ul></li><li>guaranteed to find an optimal solution<ul><li>at least theoretically</li><li>strong when the new constraint reduced the search space<ul><li>scheduling problems are good examples</li></ul></li></ul></li></ul><h1 id="symmetry-breaking-bibd-scene-allocation"><a class="markdownIt-Anchor" href="#symmetry-breaking-bibd-scene-allocation"></a> Symmetry breaking, BIBD, scene allocation</h1><h2 id="balance-incomplete-block-designs-bibds"><a class="markdownIt-Anchor" href="#balance-incomplete-block-designs-bibds"></a> Balance Incomplete Block Designs (BIBDs)</h2><p>(v,b,r,k,l)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span> Rows = <span class="number">1</span> .. v;</span><br><span class="line"><span class="built_in">range</span> Cols = <span class="number">1</span> .. b;</span><br><span class="line">var(<span class="built_in">int</span>) m[Rows, Cols] <span class="keyword">in</span> <span class="number">0.</span>.<span class="number">.1</span>;</span><br><span class="line">solve {</span><br><span class="line">forall (i <span class="keyword">in</span> Rows)</span><br><span class="line">  <span class="built_in">sum</span> (y <span class="keyword">in</span> Cols) m[i,y] = r; <span class="comment"># 每行加起来是r</span></span><br><span class="line">  forall (j <span class="keyword">in</span> Cols)</span><br><span class="line">  <span class="built_in">sum</span> (x <span class="keyword">in</span> Rows) m[x,j] = k;<span class="comment"># 每列加起来是k</span></span><br><span class="line">  forall (i <span class="keyword">in</span> Rows, j <span class="keyword">in</span> Rows: j &gt; i)</span><br><span class="line">  <span class="built_in">sum</span> (x <span class="keyword">in</span> Cols) (m[i,x] &amp; m[j,x]) = l<span class="comment"># 任意两行的向量积为l</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>其实交换swap任意两行或者两列没有任何影响.</p><ul><li><p>How to break the variable symmetries: Impose an ordering on the variables</p></li><li><p>Consider the row symmetries: impose a lecicographic constraint</p></li><li><p>Lexicographic ordering</p><img src="https://p.ipic.vip/k3fyhf.png" alt="image-2023112433918403 PM" style="zoom:50%;"></li></ul><p><img src="https://p.ipic.vip/q2ehjf.png" alt="image-2023112434002213 PM"></p><p>先把行排序再把列排序。</p><p><img src="https://p.ipic.vip/jrcir4.png" alt="image-2023112434228532 PM"></p><h2 id="scene-allocation"><a class="markdownIt-Anchor" href="#scene-allocation"></a> Scene Allocation</h2><p><img src="https://p.ipic.vip/6wsx3l.png" alt="image-2023112434553264 PM"></p><p><img src="https://p.ipic.vip/zwelld.png" alt="image-2023112434548024 PM"></p><ul><li><p>appears[Scene1] = {Actor1, Actor2 ,…}</p></li><li><p>which[Actor1] = {Scene1, Scene2, …}</p></li><li><p>shoot[Scene1] = Day1</p></li><li><p>Everyday I can shoot at most 5 scenes.</p></li><li><p>Scene1 is shot on the first day.</p></li><li><p>For every scene after scene 1, scene s can be shot on any previous scheduled day  and another new day.</p></li></ul><p><img src="https://p.ipic.vip/gre9uz.png" alt="image-2023112441119670 PM"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;intuition-computational-paradigm-map-coloring-n-queens&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#intuition-computational-paradigm-map-col</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://artemis727.github.io/categories/Algorithm/"/>
    
    
    <category term="optimization" scheme="https://artemis727.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>Discrete Optimization | The Knapsack Problem</title>
    <link href="https://artemis727.github.io/2023/11/04/Discrete-Optimization-The-Knapsack-Problem/"/>
    <id>https://artemis727.github.io/2023/11/04/Discrete-Optimization-The-Knapsack-Problem/</id>
    <published>2023-11-04T08:50:42.000Z</published>
    <updated>2023-11-24T07:23:30.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="the-knapsack-problem"><a class="markdownIt-Anchor" href="#the-knapsack-problem"></a> The Knapsack Problem</h1><h2 id="greedy-algorithm-heuristics"><a class="markdownIt-Anchor" href="#greedy-algorithm-heuristics"></a> Greedy Algorithm / heuristics</h2><blockquote><p>“Take the most valuable item first.”</p></blockquote><ul><li>Key Idea: Build a solution bu picking items one at a time.</li><li>Different Ideas<ul><li>Idea 1: <strong>More</strong> items is best, start with small ones and take as many as you can.</li><li>Idea 2: <strong>Valuable</strong> items are best, start with the most valuable items.</li><li>Idea 3: <strong>Value density</strong>! dollars per kilogram</li></ul></li><li>=&gt; Improve the answer based on the above.</li><li>Overview<ul><li>For one problem, there are many possible greedy algorithms.<ul><li>some will do better than others</li><li>depends on the input!</li></ul></li><li><strong>Advantages</strong><ul><li>quick to design and implement</li><li>can be very fast</li></ul></li><li><strong>Problems</strong><ul><li>no quality guarantees (in general)</li><li>quality can vary widely on the input</li><li>peoblem feasibility needs to be ‘easy’</li></ul></li></ul></li><li>Essence<ul><li>We can always start with greedy.</li><li>Going beyond greedy, find out the improve space<ul><li>Constraint Programming</li><li>Local Search</li><li>Mixed Integar Programming</li></ul></li></ul></li><li>Ways to<ul><li>reliably find feasible solutions</li><li>reliably build high-quality solutions<ul><li>robust to different inputs</li></ul></li><li>ideally, proving those solutions are the best</li></ul></li></ul><h2 id="modeling"><a class="markdownIt-Anchor" href="#modeling"></a> Modeling</h2><h3 id="how-to-formalize-an-optimization-task-as-a-mathematical-model"><a class="markdownIt-Anchor" href="#how-to-formalize-an-optimization-task-as-a-mathematical-model"></a> How to formalize an optimization task as a mathematical model</h3><p>Given a set of Items <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span>, each item <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow><annotation encoding="application/x-tex">i \in I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span> characterized by</p><ul><li>its weight <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">w_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>its value <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li></ul><p>and</p><ul><li>a capacity <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span> for a knapsack</li></ul><p>find the subset of items in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></p><ul><li>that has maximum value</li><li>does not exceed the capacity <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span> of the knapsack</li></ul><h3 id="how-to-model-an-optimization-peoblem"><a class="markdownIt-Anchor" href="#how-to-model-an-optimization-peoblem"></a> <strong>How to model an optimization peoblem</strong></h3><ol><li><strong>decision variables</strong> -&gt; encode the result</li><li><strong>problem constraints</strong> in terms of those decision variables -&gt; specify the solutions of the problems</li><li><strong>objective function</strong> -&gt; specify the quality of each problem</li></ol><h3 id="the-result-is-an-optimization-model"><a class="markdownIt-Anchor" href="#the-result-is-an-optimization-model"></a> The result is an optimization model</h3><ul><li><p>decalrative formulation -&gt; ‘what’, not ‘how’</p></li><li><p>many ways, many models</p></li></ul><h3 id="a-knapsack-model"><a class="markdownIt-Anchor" href="#a-knapsack-model"></a> A knapsack Model</h3><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>z</mi><mi>e</mi><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></munder><msub><mi>v</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub><mspace linebreak="newline"></mspace><mi>s</mi><mi>u</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mspace width="1em"></mspace><mi>t</mi><mi>o</mi><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></munder><msub><mi>w</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub><mo>≤</mo><mi>K</mi><mspace linebreak="newline"></mspace><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow><mspace width="1em"></mspace><mo stretchy="false">(</mo><mi>i</mi><mo>∈</mo><mi>I</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">maximize \sum_{i \in I}v_ix_i \\subject\quad to \sum_{i \in I}w_ix_i \leq K \\x_i \in {0,1} \quad (i\in I)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mclose">)</span></span></span></span></span></p><p>Expomential growth</p><ul><li>How many possible configurations?</li><li>Not all of them are feasible.</li><li>How many are they? <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi mathvariant="normal">∣</mi><mi>I</mi><mi mathvariant="normal">∣</mi></mrow></msup></mrow><annotation encoding="application/x-tex">2^{|I|}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="mord mtight">∣</span></span></span></span></span></span></span></span></span></span></span></span></li><li>How much time to explore them all? more than <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">10^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span> centuries</li></ul><h2 id="dynamic-programming"><a class="markdownIt-Anchor" href="#dynamic-programming"></a> Dynamic Programming</h2><p>Basic principle:</p><ul><li>divide and conquer</li><li><strong>bottom up</strong> computation</li></ul><hr><ul><li><p>Basic conventions and notations</p><ul><li><p>assume that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>I</mi><mo>=</mo><mo stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">I = \{1,2, ... , n\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">}</span></span></span></span></p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span> denotes the optimal solution to the knapsack problem with capacity k and items [1, …, j]</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>z</mi><mi>e</mi><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></munder><msub><mi>v</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub><mspace linebreak="newline"></mspace><mi>s</mi><mi>u</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mspace width="1em"></mspace><mi>t</mi><mi>o</mi><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></munder><msub><mi>w</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub><mo>≤</mo><mi>K</mi><mspace linebreak="newline"></mspace><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow><mspace width="1em"></mspace><mo stretchy="false">(</mo><mi>i</mi><mo>∈</mo><mn>1..</mn><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">maximize \sum_{i \in I}v_ix_i \\subject\quad to \sum_{i \in I}w_ix_i \leq K \\x_i \in {0,1} \quad (i\in 1..j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.3717110000000003em;vertical-align:-1.321706em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8556639999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.321706em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6891em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></span></p></li></ul></li><li><p>We are interested in finding out the best balue <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>K</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(K,n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p></li></ul><h3 id="recurrence-relations-bellman-equations"><a class="markdownIt-Anchor" href="#recurrence-relations-bellman-equations"></a> Recurrence Relations (Bellman Equations)</h3><ol><li>We know how to solve <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k,j-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> for all <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0...</mn><mi>K</mi></mrow><annotation encoding="application/x-tex">0 ... K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>.</li><li>We only consider one more item <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span> to solve <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(k,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></li><li>In summary,</li></ol><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>v</mi><mi>i</mi></msub><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><msub><mi>w</mi><mi>j</mi></msub><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace width="1em"></mspace><mi>i</mi><mi>f</mi><mtext>  </mtext><msub><mi>w</mi><mi>j</mi></msub><mo>≤</mo><mi>k</mi><mspace linebreak="newline"></mspace><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace width="1em"></mspace><mi>o</mi><mi>t</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">O(k,j)=max(O(k,j-1), v_i+O(k-w_j, j-1)) \quad if \; w_j \leq k \\O(k,j) = O(k,j-1) \quad otherwise</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9456279999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">e</span></span></span></span></span></p><ol start="4"><li>Of course,</li></ol><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mspace width="1em"></mspace><mi>f</mi><mi>o</mi><mi>r</mi><mtext>  </mtext><mi>a</mi><mi>l</mi><mi>l</mi><mtext>  </mtext><mi>k</mi></mrow><annotation encoding="application/x-tex">O(k,0) = 0 \quad for \; all \; k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">O</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> j)</span> </span>{</span><br><span class="line">  <span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (wj &lt;= k)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">O</span>(k,j<span class="number">-1</span>), vj+<span class="built_in">O</span>(k-wj,j<span class="number">-1</span>));</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">O</span>(k,j<span class="number">-1</span>)</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="relaxation-branch-and-bound"><a class="markdownIt-Anchor" href="#relaxation-branch-and-bound"></a> Relaxation, branch and bound</h2><ul><li>Iterative 2 steps<ul><li>branching: split the problem to subproblems</li><li>bounding: find an optimistic estimate of the best solution to the subproblems<ul><li>maximization: upper bound</li><li>minimization: lower bound</li></ul></li></ul></li></ul><hr><h3 id="linear-relaxition"><a class="markdownIt-Anchor" href="#linear-relaxition"></a> Linear Relaxition</h3><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>l</mi><mi>e</mi><mi>t</mi><mtext>  </mtext><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mfrac><msub><mi>y</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub></mfrac><mspace linebreak="newline"></mspace><mi>m</mi><mi>a</mi><mi>x</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>z</mi><mi>e</mi><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mn>1..</mn><mi>j</mi></mrow></munder><msub><mi>y</mi><mi>i</mi></msub><mspace linebreak="newline"></mspace><mi>s</mi><mi>u</mi><mi>b</mi><mi>j</mi><mi>e</mi><mi>c</mi><mi>t</mi><mtext>  </mtext><mi>t</mi><mi>o</mi><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><mn>1..</mn><mi>j</mi></mrow></munder><mfrac><msub><mi>w</mi><mi>i</mi></msub><msub><mi>v</mi><mi>i</mi></msub></mfrac><msub><mi>y</mi><mi>i</mi></msub><mo>≤</mo><mi>K</mi><mspace linebreak="newline"></mspace><mn>0</mn><mo>≤</mo><msub><mi>y</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><mtext>  </mtext><mo stretchy="false">(</mo><mi>i</mi><mo>∈</mo><mn>1..</mn><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">let \; x_i = \frac{y_i}{v_i} \\maximize \sum_{i \in 1..j}y_i \\subject \; to \sum_{i \in 1..j} \frac {w_i} {v_i}y_i \leq K \\0 \leq y_i \leq 1 \; (i \in 1..j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.94356em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.463782em;vertical-align:-1.413777em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mord mathnormal">i</span><span class="mord mathnormal">m</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8723309999999997em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mtight">1</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.413777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.521337em;vertical-align:-1.413777em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">e</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8723309999999997em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mtight">1</span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.413777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8304100000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></span></p><h2 id="depth-first-branch-and-bound"><a class="markdownIt-Anchor" href="#depth-first-branch-and-bound"></a> Depth-first Branch and Bound</h2><p><img src="https://p.ipic.vip/quhk8c.png" alt="image-20231105125136895 PM"></p><h2 id="search-srategies-depth-first-best-first-least-discrepancy"><a class="markdownIt-Anchor" href="#search-srategies-depth-first-best-first-least-discrepancy"></a> Search srategies: depth first, best first, least discrepancy</h2><h3 id="depth-first"><a class="markdownIt-Anchor" href="#depth-first"></a> Depth-first</h3><ul><li>Key idea -&gt; go deep</li><li>When prune? -&gt; the new evaluation (ideal estimation) is lower than the found solution</li><li>How memory efficient?<ul><li>Method: exaggerate, imagine infinate nodes</li><li>Very memory-efficient</li></ul></li></ul><h3 id="best-frist-branch-and-bound"><a class="markdownIt-Anchor" href="#best-frist-branch-and-bound"></a> Best-Frist Branch and Bound</h3><p><img src="https://p.ipic.vip/jnnmqe.png" alt="image-2023110511748193 PM"></p><ul><li>Key idea -&gt; go for the best</li><li>When prune? -&gt; when all the node are worse than a found solution</li><li>How memory efficient? -&gt; It’s likely to have the optimal situation (the least nodes), but also the disaster (the entire tree).</li></ul><h3 id="limited-discrepancy-search"><a class="markdownIt-Anchor" href="#limited-discrepancy-search"></a> Limited Discrepancy Search</h3><p><img src="https://p.ipic.vip/6ivne8.png" alt="image-2023110512653845 PM"></p><ul><li>Key idea -&gt; trust the greedy heuristic</li><li>When prune? -&gt; like best-first</li><li>How memory efficient? -&gt; When you have a good heuristic, it would be a good method.</li></ul><h3 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h3><p>Make a trade-off between relaxition and search.</p><h2 id="assignment"><a class="markdownIt-Anchor" href="#assignment"></a> Assignment</h2><p><img src="https://p.ipic.vip/5l4dqr.png" alt="image-2023110515630463 PM"></p><h2 id="exploring-the-material"><a class="markdownIt-Anchor" href="#exploring-the-material"></a> Exploring the Material</h2><ul><li>Constraint Programming (CP)</li><li>Local Search (LS)</li><li>Mixed Integer Programming (MIP)</li></ul><img src="https://p.ipic.vip/3ji5gl.png" alt="image-2023110625449416 PM" style="zoom:50%;"><ul><li><p>Quality-baesd: DP, CP, MIP</p></li><li><p>Scalability-based: LS</p></li><li><p>局部搜索（LS）虽然不能保证结果的最优性，但是在问题规模巨大的情况下，它是一个很好的选择。动态规划（DP）、约束规划（CP）、混合整数规划（MIP）在问题规模较小的情况下，能够保证结果的最优性，但却不适合大规模问题的求解。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;the-knapsack-problem&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#the-knapsack-problem&quot;&gt;&lt;/a&gt; The Knapsack Problem&lt;/h1&gt;
&lt;h2 id=&quot;greedy-algori</summary>
      
    
    
    
    <category term="Algorithm" scheme="https://artemis727.github.io/categories/Algorithm/"/>
    
    
    <category term="optimization" scheme="https://artemis727.github.io/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>R｜Bootstrap</title>
    <link href="https://artemis727.github.io/2023/09/26/R%EF%BD%9CBootstrap/"/>
    <id>https://artemis727.github.io/2023/09/26/R%EF%BD%9CBootstrap/</id>
    <published>2023-09-26T01:10:08.000Z</published>
    <updated>2023-11-05T04:52:25.308Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">library<span class="punctuation">(</span>boot<span class="punctuation">)</span></span><br><span class="line">set.seed<span class="punctuation">(</span><span class="number">2014</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># Bootstrap the mean</span></span><br><span class="line">samplemean <span class="operator">&lt;-</span> <span class="keyword">function</span><span class="punctuation">(</span>data<span class="punctuation">,</span> indices<span class="punctuation">)</span> <span class="punctuation">{</span></span><br><span class="line">  <span class="built_in">return</span><span class="punctuation">(</span>mean<span class="punctuation">(</span>data<span class="punctuation">[</span>indices<span class="punctuation">]</span><span class="punctuation">,</span> na.rm <span class="operator">=</span> <span class="built_in">T</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br><span class="line"><span class="punctuation">}</span></span><br><span class="line">boot.Baseline <span class="operator">&lt;-</span> boot<span class="punctuation">(</span>data<span class="operator">=</span>data1<span class="operator">$</span>Baseline<span class="punctuation">,</span> statistic<span class="operator">=</span>samplemean<span class="punctuation">,</span> R<span class="operator">=</span><span class="number">10000</span><span class="punctuation">)</span></span><br><span class="line"><span class="comment"># view results of bootstrap</span></span><br><span class="line">boot.Baseline</span><br><span class="line">plot<span class="punctuation">(</span>boot.Baseline<span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/lc6795.png" alt="image-20231105125202451 PM"></p><p>这是一个针对 <code>data1$Baseline</code> 的非参数性Bootstrap（自助法）分析的结果。</p><ul><li><strong>原始样本均值</strong>（original sample mean）：样本的平均值为 328.8。</li><li><strong>偏差（Bias）</strong>：Bootstrap 样本均值相对于原始样本均值的偏差，这里为 -0.18591。偏差是一种测量估计量的系统误差的方式，如果估计量是无偏的，那么偏差会接近零。</li><li><strong>标准误差（Standard Error）</strong>：Bootstrap 样本均值的标准差，这里为 17.68664。它是对估计值的不确定性的度量，标准误差越大，表示估计值的不确定性越高。</li></ul><p>这些结果反映了通过 Bootstrap 方法估计得到的样本均值的性质和不确定性。 Bootstrap 是一种用于估计统计量的方法，通过从原始样本中重复抽取样本并计算统计量，以获取该统计量的抽样分布及其性质。这对于在没有明确分布假设的情况下进行推断非常有用。</p><p><img src="https://p.ipic.vip/61b79v.png" alt="image-20231105125211427 PM"></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 95% BCA confidence interval from Bootstrap of Mean</span></span><br><span class="line">bci <span class="operator">&lt;-</span> boot.ci<span class="punctuation">(</span>boot.Baseline<span class="punctuation">,</span> type<span class="operator">=</span><span class="string">"bca"</span><span class="punctuation">,</span> conf <span class="operator">=</span> <span class="number">0.95</span><span class="punctuation">)</span></span><br><span class="line">table1<span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> mean<span class="punctuation">(</span>boot.Baseline<span class="operator">$</span>t<span class="punctuation">)</span> <span class="comment"># avg of the bootstrap samples</span></span><br><span class="line">table1<span class="punctuation">[</span><span class="number">2</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span> <span class="operator">&lt;-</span> paste<span class="punctuation">(</span><span class="built_in">round</span><span class="punctuation">(</span>bci<span class="operator">$</span>bca<span class="punctuation">[</span><span class="number">4</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">)</span><span class="punctuation">,</span><span class="string">' to '</span><span class="punctuation">,</span> <span class="built_in">round</span><span class="punctuation">(</span>bci<span class="operator">$</span>bca<span class="punctuation">[</span><span class="number">5</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="number">2</span><span class="punctuation">)</span><span class="punctuation">)</span></span><br></pre></td></tr></table></figure><p><img src="https://p.ipic.vip/gnp6r7.png" alt="image-20231105125220700 PM"></p><ul><li>[Judge] Bootstrap can be used to genreate a trainset and another bootstrap can be used to generate a testset.<ul><li><strong>No</strong>! The trainset and the test set should not be duplicated, they should be different.</li></ul></li><li>[Judge] Bootstrap can be used to train a model that could predict Y.<ul><li><strong>True</strong>. Random forest uses bootstrap to generate a model that can predict Y.</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="R" scheme="https://artemis727.github.io/categories/R/"/>
    
    
  </entry>
  
</feed>
